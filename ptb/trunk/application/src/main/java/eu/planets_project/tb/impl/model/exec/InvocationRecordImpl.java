/**
 * 
 */
package eu.planets_project.tb.impl.model.exec;

import java.io.Serializable;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Calendar;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import eu.planets_project.services.datatypes.Parameter;
import eu.planets_project.services.datatypes.ServiceDescription;
import eu.planets_project.services.datatypes.Tool;
import eu.planets_project.tb.api.model.Experiment;
import eu.planets_project.tb.api.persistency.ExperimentPersistencyRemote;
import eu.planets_project.tb.api.persistency.ServiceRecordPersistencyRemote;
import eu.planets_project.tb.impl.model.ExperimentExecutableImpl;
import eu.planets_project.tb.impl.model.measure.MeasurementImpl;
import eu.planets_project.tb.impl.persistency.ExperimentPersistencyImpl;
import eu.planets_project.tb.impl.persistency.ServiceRecordPersistencyImpl;

/**
 * This is a record of the invocation of a service. 
 * Can be re-used outside a workflow context if required.
 * 
 * For a 'user' agent, the 'parameters' could specifiy the view platform.
 * 
 * @author <a href="mailto:Andrew.Jackson@bl.uk">Andy Jackson</a>
 *
 */
@Entity
@XmlRootElement(name = "InvocationRecord")
@XmlAccessorType(XmlAccessType.FIELD)
public class InvocationRecordImpl implements Serializable {
    /** */
    private static final Log log = LogFactory.getLog(InvocationRecordImpl.class);
    /** */
    private static final long serialVersionUID = -8012213064019484451L;
    
    @Id
    @GeneratedValue
    @XmlTransient
    private long id = -1;
    
    /** The parent Execution entity, set if this was generated by a workflow. */
    @ManyToOne
    private ExecutionRecordImpl execution;

    /** The record of the service description of the Agent, if it is a Service */
    @ManyToOne
    private ServiceRecordImpl serviceRecord;
    
    /** A record of the identity of the Agent, if it is a User */
    private String username = null;

    /** The input parameters */
    @OneToMany(cascade=CascadeType.ALL, mappedBy="invocation", fetch=FetchType.EAGER)
    private Set<InvocationParameterImpl> parameters = new HashSet<InvocationParameterImpl>();
    
    /** The output results */
//  - List<Output> ???
//  - OutputDigitalObject ???
//  - {ServiceReport}
    
    /** The measurements about this invocation */
    @OneToMany(cascade=CascadeType.ALL, mappedBy="invocation", fetch=FetchType.EAGER)
    private Set<MeasurementImpl> measurements = new HashSet<MeasurementImpl>();

    
    /** For JAXB */
    @SuppressWarnings("unused")
    private InvocationRecordImpl() {
    }
    
    public InvocationRecordImpl( ServiceRecordImpl serviceRecord ) {
        this.serviceRecord = serviceRecord;
    }
    

    /**
     * @return the id
     */
    public long getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * @return the execution
     */
    public ExecutionRecordImpl getExecution() {
        return execution;
    }

    /**
     * @param execution the execution to set
     */
    public void setExecution(ExecutionRecordImpl execution) {
        this.execution = execution;
    }

    /**
     * @return the parameters
     */
    public Set<InvocationParameterImpl> getParameters() {
        return parameters;
    }

    /**
     * @param p
     */
    public void addParameter( Parameter p ) {
        InvocationParameterImpl ip = new InvocationParameterImpl(p);
        ip.setInvocation(this);
        this.parameters.add(ip);
    }

    /**
     * @return the measurements
     */
    public Set<MeasurementImpl> getMeasurements() {
        return measurements;
    }

}
