<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- Testbed EJB deployer build file                                                       -->
<!-- ======================================================================= -->

<project name="Testbed EJB deployer" default="deploy:ear" basedir=".">

  <property environment="env"/>
  
  <property name="appName" value="testbed"/>
  <property name="war.base.name" value="${appName}.war"/>
  <property name="src.dir" value="${basedir}/java"/>
  <property name="src.resources" value="${basedir}/resources"/>
  <!--property name="jboss.home" value="${env.JBOSS_HOME}"/-->
  <property name="build.dir" value="${basedir}/build"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="test.dir" value="${basedir}/../test/java"/>
  <property name="client.config" value="${basedir}/../test/client-config"/>

  <!--To configure within the config.properties file-->
  <property file="config.properties"/>
  <property name="jboss.home" value="${if_server.dir}"/>
  <property name="junit.lib" value="${junitlib.dir}"/>
  
  <!-- The location of the DR config directory (can be overridden in config.properties) -->
  <property name="doms.config.dir" value="${jboss.home}/server/default/data/planets/dom-config"/>

  <!-- Build classpath -->
  <path id="classpath">
    <fileset dir="${jboss.home}/client">
        <include name="*.jar"/>
    </fileset>
    <fileset dir="${jboss.home}/server/default/lib">
        <include name="*.jar"/>
    </fileset>
    <fileset dir="${jboss.home}/server/default/deploy/">
      <include name="ejb3.deployer/*.jar"/>
      <include name="jboss*web*/jsf-libs/*.jar"/>
      <include name="jboss*web*/*.jar"/>
    </fileset>
    <fileset dir="${jboss.home}/lib">
        <include name="*.jar"/>
    </fileset>
    <!--testbed specific libs -->
    <fileset dir="${basedir}/web/WEB-INF/lib">
        <include name="*.jar"/>
    </fileset>
    <!--include JUNIT 4.0 lib-->
       <!--fileset dir="${junit.lib}">
        <include name="*.jar"/>
    </fileset--> 
 	<!--include our external resources as *.xml and *.props-->
	<pathelement location="${basedir}/resources"/>
	<pathelement location="${build.classes.dir}"/>
	<!-- So that we can get jndi.properties for InitialContext -->
	<pathelement location="${client.config}"/>
  </path>

  <property name="build.classpath" refid="classpath"/>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source code                                            -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare">
   <echo message="ant.java.version: ${ant.java.version}" />
	<!--compile the model-->
    <javac source="1.5" target="1.5"
		 srcdir="${src.dir}"
           destdir="${build.classes.dir}"
           debug="on"
           deprecation="on"
           optimize="off"
           includes="**">
            <classpath refid="classpath"/>
    </javac>
    <!-- tempory not compiling test cases - include after restructuring build.xml-->
	<!--compile the test-classes, session beans, etc.-->
        <!--javac source="1.5" target="1.5"
			srcdir="${test.dir}"
           destdir="${build.classes.dir}"
           debug="on"
           deprecation="on"
           optimize="off"
           includes="**">
            <classpath refid="classpath"/>
    </javac-->
  </target>

  <target name="createejbjar" depends="compile">
    <jar jarfile="${build.dir}/testbedmodel.jar">
      <fileset dir="${build.classes.dir}">
        <include name="**"/>
      </fileset>
      <fileset dir="${src.resources}/">
          <include name="META-INF/persistence.xml"/>
      </fileset>
      <fileset dir="${src.resources}/">
          <!-- e.g. BackendResources.properties, schema files, etc."/-->
          <include name="*eu/planets_project/tb/impl/*.xml"/>
          <include name="*eu/planets_project/tb/impl/*.xsd"/>
          <include name="*eu/planets_project/tb/impl/*.owl"/>
          <include name="*eu/planets_project/tb/impl/*.properties"/>
          <!--the approval vm's-->
          <include name="**/*.vm"/>
      </fileset>
     </jar>
  </target>

 <target name="deploy:model" depends="createejbjar">
 	<copy file="${build.dir}/testbedmodel.jar" todir="${jboss.home}/server/default/deploy"/>
  </target>
  
  <target name="run.client" depends="deploy:model">
    <java  classname="test.eu.planets_project.tb.Client" fork="yes" dir=".">
      <classpath refid="classpath"/>
    </java>
  </target>
  
    <target name="run.debug1">
    <java  classname="test.eu.planets_project.tb.test.Client" fork="yes" dir=".">
      <classpath refid="classpath"/>
    </java>
  </target>

  <target name="run.debug2">
    <java  classname="eu.planets_project.tb.test.Client2" fork="yes" dir=".">
      <classpath refid="classpath"/>
    </java>
  </target>
  
  <target name="run.junittests" description="executes the included JUnit tests">
    <junit fork="yes" haltonfailure="yes">
        <!--test name="eu.planets_project.tb.unittest.model.BasicPropertiesTest" /-->
        <!--test name="eu.planets_project.tb.unittest.model.benchmark.BenchmarkGoalHandlerTest" /-->
        <!--test name="eu.planets_project.tb.unittest.model.benchmark.BenchmarkGoalTest" /-->
        <!--test name="eu.planets_project.tb.unittest.model.mockup.ExperimentWorkflowTest" /-->
        <!--test name="eu.planets_project.tb.unittest.model.mockup.WorkflowHandlerTest" /-->
        <!--test name="eu.planets_project.tb.unittest.model.mockup.WorkflowTest" /-->
        <!--test name="eu.planets_project.tb.unittest.TestbedManagerTest" /-->
        <!--test name="eu.planets_project.tb.unittest.AdminManagerTest" /-->
        <!--test name="eu.planets_project.tb.unittest.model.ExperimentTest" /-->
        <!--test name="eu.planets_project.tb.unittest.model.ExperimentSetupTest" /-->
        <!--test name="eu.planets_project.tb.unittest.model.ExperimentExecutionTest" /-->
        <!--test name="eu.planets_project.tb.unittest.model.ExperimentEvaluationTest" /-->
        <test name="eu.planets_project.tb.unittest.system.mockup.WorkflowInvokerTest" />
        <!--test name="eu.planets_project.tb.unittest.model.CommentBrowserTest" /-->
        <formatter type="plain" usefile="false" />
        <classpath refid="classpath" />
    </junit>
  </target>
  
  <!-- =================================================================== -->
  <!-- Cleans up generated stuff on JBoss                                          -->
  <!-- =================================================================== -->
  <target name="clean.db" description="deletes the testbed database">
    <!--delete dir="${jboss.home}/server/default/data/hypersonic"/-->
    <delete>
        <fileset dir="${jboss.home}/server/default/data/hypersonic/">
            <include name="testbedDB*.*" />
        </fileset>
    </delete>
  </target>

  <target name="clean" depends="undeploy" description="cleans the build dir and finally undeploys the testbed application">
      <delete dir="${build.dir}"/>
  </target>

  <target name="undeploy" description="undeploy the testbed application from the JBoss application server">
      <delete file="${jboss.home}/server/default/deploy/${appName}.ear"/>
  </target>
  
  <target name="undeploy:ds" description="Undeploy the TB data source.">
    <delete file="${jboss.home}/server/default/deploy/${appName}-ds.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- Helper targets to start the JBoss in a new cmd window (on Windows)                                         -->
  <!-- =================================================================== -->
<target name="startjboss" description="launches the Jboss application server">
  <exec dir="${jboss.home}/bin" executable="cmd.exe" spawn="true">
    <arg value="/c start run.bat"/>
  </exec>
</target>

<!-- ks -->

  <target name="makeDirectories">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.dir}/${appName}" />
    <mkdir dir="${build.dir}/${appName}/WEB-INF/lib" />
    <mkdir dir="${build.dir}/${appName}/WEB-INF/classes" />
  </target>

  <target name="populateDirectories" depends="makeDirectories">
    <!--<copy todir="${build.dir}/${appName}/WEB-INF/lib">
        <fileset dir="lib">
            <include name="*.jar"/>
        </fileset>      
    </copy> -->
  </target>

  <target name="dist" depends="deploy:ds, deploy:doms, populateDirectories">

    <copy todir="${build.dir}/${appName}">
      <fileset dir="web" casesensitive="yes">
        <include name="**/*.*" />
      </fileset>   
    </copy>

    <copy todir="${build.dir}/${appName}/WEB-INF/classes">
      <fileset dir="${basedir}/web/css">
        <!-- richFaces skin files need to be located in WEB-INF/classes dir-->
        <include name="richFacesTestbed.skin.properties" />
      </fileset>  
      <fileset dir="${basedir}/resources">
        <include name="**/*.properties" />
        <include name="**/*.xml" />
        <include name="**/*.vm"/>
        <exclude name="testbed-log4j.xml" />
      </fileset>
    </copy>
    
    <!-- moves libs for the .ear into the lib directory as e.g. commons-io.jar-->
    <move todir="${build.dir}/lib">
		<fileset dir="${build.dir}/${appName}/WEB-INF/lib">
          <include name="commons-*.jar" />
          <include name="castor-xml.jar" />
          <include name="charts4j-*.jar" />
          <include name="jcommon-*.jar" />
          <include name="jfreechart-*.jar" />
          <include name="iText-*.jar" />
          <include name="js.jar" />
          <include name="pdf-transcoder.jar" />
          <include name="batik-*.jar" />
          <include name="opencsv-*.jar" />
          <include name="orphanNodesAlg.jar" />
          <include name="iri.jar" />
          <include name="icu4j_3_4.jar" />
		  <!-- additional libs for OAI harvesting -->
          <include name="oai4j-0.6b1.jar" />
          <include name="dom4j-1.6.1.jar" />
          <include name="jaxen-1.1.1.jar" />
          <!-- additional libs jena/pellet reasoning -->
          <include name="jena.jar" />
          <include name="protege*.jar" />
          <include name="pellet*.jar" />
          <include name="xsdlib.jar" />
          <include name="aterm-java-1.6.jar" />
          <include name="relaxngDatatype.jar" />
           <include name="slf4j*.jar" />
           <include name="owlapi-bin.jar" />
		</fileset>
	</move>

    <jar jarfile="${build.dir}/${appName}.war" basedir="${build.dir}/${appName}">
    </jar>

  	<ear destfile="${build.dir}/${appName}.ear" appxml="resources/META-INF/application.xml">
			  <fileset dir="${build.dir}" includes="*.jar,*.war"/>
			  <manifest>
				 <attribute name="Implementation-Title" value="Planets Testbed"/>
				 <attribute name="Class-Path" value="lib/commons-io-1.4.jar lib/castor-xml.jar lib/xsdlib.jar"/>
			</manifest>
			<!-- includes libs for the ear-->
			<fileset dir="${build.dir}">
				<include name="lib/*.*"/>
			</fileset>
  	        <!-- Include config file -->
  	        <fileset dir="resources">
              <include name="META-INF/jboss-app.xml"/>
              <include name="META-INF/jboss.xml"/>
  	        </fileset>
	 </ear>
  	
  </target>

  <target name="deploy:war" depends="undeploy, deploy:model, dist">
    <copy file="${build.dir}/${appName}.war" todir="${jboss.home}/server/default/deploy" overwrite="true"/>
  </target>

  <target name="deploy:ear" depends="undeploy, createejbjar, dist" description="DEFAULT builds and deploy the Testbed application">
    <copy file="${build.dir}/${appName}.ear" todir="${jboss.home}/server/default/deploy" overwrite="true"/>
  </target>

  <target name="deploy:ds" description="Deploy the TB data source.">
    <copy file="${src.resources}/META-INF/testbed-ds.xml" todir="${jboss.home}/server/default/deploy" />
  </target>
  
  <target name="deploy:doms" description="Deploy the Testbed-specific Data Registry configuration files.">
    <copy todir="${doms.config.dir}" overwrite="true">
      <fileset dir="${basedir}/resources/eu/planets_project/tb/dataregistry">
        <include name="*.properties" />
      </fileset>
    </copy>
    <replace dir="${doms.config.dir}">
      <include name="*.properties" />
      <replacefilter token="@if_server.dir@" value="${if_server.dir}" />
    </replace>
  </target>
    
  <target name="build:ear" depends="createejbjar,dist" description="builds the Testbed application"/>

</project>
