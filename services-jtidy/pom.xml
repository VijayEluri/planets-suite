<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!--TODO AL: move plugins, etc that is common for all services into the 
		service's pom -->
	<parent>
		<groupId>planets-suite</groupId>
		<artifactId>planets-services</artifactId>
		<version>1.0.1-SNAPSHOT</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>
	<groupId>planets-suite</groupId>
	<artifactId>planets-services-jtidy</artifactId>
	<packaging>war</packaging>
	<name>Planets Preservation Service - JTidy</name>
	<description>The planets service: JTidy as war and osgi-bundle</description>
	<build>
		<resources>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<!-- registers external (customized) 3rd party jars which te service 
					is dependant upon into the local maven repository, so that it can be referenced 
					by e.g. karaf-features -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>2.3.1</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<configuration>
							<groupId>planets-suite</groupId>
							<artifactId>planets-services-3rdpartyjars-jtidy</artifactId>
							<file>${basedir}/lib/Tidy.jar</file>
							<version>1</version>
							<packaging>jar</packaging>
						</configuration>
						<goals>
							<goal>install-file</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- This ensures the tests run as there is no Testsuite - not really 
				necessary I think. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<includes>
						<!--TODO AL: comment back in - there's a bug in a config, which is 
							looking for home/anj -->
						<include>**/*Tests.java</include>
					</includes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<warSourceDirectory>web</warSourceDirectory>
					<archive>
						<!-- add the generated manifest of the osgi-bundle plugin to the war -->
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
					</archive>
					<webXml>src/main/web/WEB-INF/web.xml</webXml>
				</configuration>
			</plugin>
			<plugin>
				<!-- The goal here is to be able to use a different packaging type than 
					"bundle", say "war" packaging, and still get benefits of the maven-bundle-plugin. 
					The major benefit is of course having the manifest being generated by the 
					BND tool. If your project is packaged as "war", you can still use the maven-bundle-plugin 
					to generate the manifest if you add "war" to supportedProjectTypes: -->
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>2.2.0</version>
				<executions>
					<execution>
						<id>bundle-manifest</id>
						<phase>process-classes</phase>
						<goals>
							<goal>manifest</goal>
						</goals>
					</execution>
				</executions>
				<extensions>true</extensions>
				<configuration>
					<supportedProjectTypes>
						<supportedProjectType>jar</supportedProjectType>
						<supportedProjectType>bundle</supportedProjectType>
						<supportedProjectType>war</supportedProjectType>
					</supportedProjectTypes>
					<instructions>
						<Bundle-SymbolicName>Planets Service - JTidy</Bundle-SymbolicName>
						<Bundle-Version>${pom.version}</Bundle-Version>
						<!--assume public classes are in the top package, and private classes 
							are under ".internal" -->
						<Export-Package>eu.planets_project.services.migrate.jtidy.*;version="${pom.version}"</Export-Package>
						<!--Export-Service>eu.planets_project.services.migrate.jtidy.JTidy</Export-Service -->
						<!--each module can override these defaults in their osgi.bnd file -->
						<_include>-osgi.bnd</_include>
						<!--bundle's embedded dependencies; don't forget to have a dependency 
							on those within the pom -->
						<Embed-Dependency>jtidy, jaxws-rt, commons-io,
							planets-core-services, planets-core-techreg, planets-core-utils</Embed-Dependency>
					</instructions>
				</configuration>
			</plugin>
			<!-- osgi - ipojo: service activation meta.xml located in src>main>osgi>ipojo -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-ipojo-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<execution>
						<goals>
							<goal>ipojo-bundle</goal>
						</goals>
						<phase>package</phase>
						<configuration>
							<metadata>src/main/osgi/ipojo/meta.xml</metadata>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- allows to work with the maven build process as well as to attach 
					arbitrary artifacts to the Maven build. The following fragment adds the karaf.feature 
					descriptor to the maven build process using the build helper plugin's attach-artifact 
					goal -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.5</version>
				<executions>
					<execution>
						<id>attach-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>target/features/jtidy-osgi-karaf-features.xml</file>
									<type>xml</type>
									<classifier>features</classifier>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- In the build-helper-maven-plugin configuration the attached artifacts 
					are retrieved from the target folder of the build. By default, Maven copies 
					resources into the target/classes folder. In order to keep these files out 
					of the bundle and off the classpath when creating the feature descriptor 
					as part of the bundle module, an additional execution of the Maven Resources 
					Plug-in is configured. The following POM fragment illustrates the configuration 
					of these executions. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4.3</version>
				<executions>
					<execution>
						<id>copy-features</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/features</outputDirectory>
							<resources>
								<resource>
									<directory>etc/karaf-features</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<!--dependency> <groupId>jtidy</groupId> <artifactId>jtidy</artifactId> 
			<version>1</version> <scope>system</scope> <systemPath>${basedir}/lib/Tidy.jar</systemPath> 
			</dependency -->
		<dependency>
			<groupId>planets-suite</groupId>
			<artifactId>planets-services-3rdpartyjars-jtidy</artifactId>
			<version>1</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.ws</groupId>
			<artifactId>jaxws-rt</artifactId>
			<version>2.2</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<type>jar</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.4</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>planets-suite</groupId>
			<artifactId>planets-core-services</artifactId>
			<version>1.0.1-SNAPSHOT</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>planets-suite</groupId>
			<artifactId>planets-core-techreg</artifactId>
			<version>1.0.1-SNAPSHOT</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>planets-suite</groupId>
			<artifactId>planets-core-utils</artifactId>
			<version>1.0.1-SNAPSHOT</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
	</dependencies>
	<!-- the maven-deploy-plugin requires the definition of a snapshot repository -->
	<!--distributionManagement> <snapshotRepository> <id>myLocalSnapshotOBR/preservation/</id> 
		<name>The OB Repository which is used for the project's 'artefacts deployment</name> 
		<url>file:/tmp/myOBRRepository</url> </snapshotRepository> </distributionManagement -->
</project>
