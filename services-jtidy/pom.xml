<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
		<groupId>org.opf_labs.suite</groupId>
        <artifactId>parent</artifactId>
        <version>1.1.0</version>
    </parent>
	<groupId>org.opf_labs.suite</groupId>
    <artifactId>services-jtidy</artifactId>
    <version>1.1.0</version>
    <packaging>jar</packaging>
    <name>Planets Service - JTidy</name>
    <dependencies>
        <dependency>
			<groupId>org.opf_labs.suite</groupId>
            <artifactId>core-services</artifactId>
            <version>1.1.0</version>
        </dependency>
        <dependency>
			<groupId>org.opf_labs.suite</groupId>
            <artifactId>core-techreg</artifactId>
            <version>1.1.0</version>
        </dependency>
        <dependency>
			<groupId>org.opf_labs.suite</groupId>
            <artifactId>core-utils</artifactId>
            <version>1.1.0</version>
        </dependency>
        <dependency>
            <groupId>net.sf.jtidy</groupId>
            <artifactId>jtidy</artifactId>
            <version>r938</version>
        </dependency>
    </dependencies>
</project>

        <!-- <plugins>
              <plugin>
                   registers external (customized) 3rd party jars which te service
                      is dependant upon into the local maven repository, so that it can be referenced
                      by e.g. karaf-features				<groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-install-plugin</artifactId>
                  <version>2.3.1</version>
                  <executions>
                      <execution>
                          <phase>generate-sources</phase>
                          <configuration>
                              <groupId>planets-suite</groupId>
                              <artifactId>planets-services-3rdpartyjars-jtidy</artifactId>
                              <file>${basedir}/lib/Tidy.jar</file>
                              <version>1</version>
                              <packaging>jar</packaging>
                          </configuration>
                          <goals>
                              <goal>install-file</goal>
                          </goals>
                      </execution>
                  </executions>
              </plugin>
              <plugin>
                  The goal here is to be able to use a different packaging type than
                      "bundle", say "war" packaging, and still get benefits of the maven-bundle-plugin.
                      The major benefit is of course having the manifest being generated by the
                      BND tool. If your project is packaged as "war", you can still use the maven-bundle-plugin
                      to generate the manifest if you add "war" to supportedProjectTypes:
                  <groupId>org.apache.felix</groupId>
                  <artifactId>maven-bundle-plugin</artifactId>
                  <version>2.2.0</version>
                  <executions>
                      <execution>
                          <id>bundle-manifest</id>
                          <phase>process-classes</phase>
                          <goals>
                              <goal>manifest</goal>
                          </goals>
                      </execution>
                  </executions>
                  <extensions>true</extensions>
                  <configuration>
                      <supportedProjectTypes>
                          <supportedProjectType>jar</supportedProjectType>
                          <supportedProjectType>bundle</supportedProjectType>
                          <supportedProjectType>war</supportedProjectType>
                      </supportedProjectTypes>
                      <instructions>
                          <Bundle-SymbolicName>Planets Service - JTidy</Bundle-SymbolicName>
                          <Bundle-Version>${pom.version}</Bundle-Version>
                          assume public classes are in the top package, and private classes
                              are under ".internal"
                          <Export-Package>eu.planets_project.services.migrate.jtidy.*;version="${pom.version}"</Export-Package>
                          Export-Service>eu.planets_project.services.migrate.jtidy.JTidy</Export-Service
                          each module can override these defaults in their osgi.bnd file
                          <_include>-osgi.bnd</_include>
                          bundle's embedded dependencies; don't forget to have a dependency
                              on those within the pom
                          <Embed-Dependency>jtidy, jaxws-rt, commons-io,
                              planets-core-services, planets-core-techreg, planets-core-utils</Embed-Dependency>
                      </instructions>
                  </configuration>
              </plugin>
               osgi - ipojo: service activation meta.xml located in src>main>osgi>ipojo
              <plugin>
                  <groupId>org.apache.felix</groupId>
                  <artifactId>maven-ipojo-plugin</artifactId>
                  <version>1.6.0</version>
                  <executions>
                      <execution>
                          <goals>
                              <goal>ipojo-bundle</goal>
                          </goals>
                          <phase>package</phase>
                          <configuration>
                              <metadata>src/main/osgi/ipojo/meta.xml</metadata>
                          </configuration>
                      </execution>
                  </executions>
              </plugin>
              <plugin>
                  allows to work with the maven build process as well as to attach
                      arbitrary artifacts to the Maven build. The following fragment adds the karaf.feature
                      descriptor to the maven build process using the build helper plugin's attach-artifact
                      goal
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>build-helper-maven-plugin</artifactId>
                  <version>1.5</version>
                  <executions>
                      <execution>
                          <id>attach-artifacts</id>
                          <phase>package</phase>
                          <goals>
                              <goal>attach-artifact</goal>
                          </goals>
                          <configuration>
                              <artifacts>
                                  <artifact>
                                      <file>target/features/jtidy-osgi-karaf-features.xml</file>
                                      <type>xml</type>
                                      <classifier>features</classifier>
                                  </artifact>
                              </artifacts>
                          </configuration>
                      </execution>
                  </executions>
              </plugin>
              <plugin>
                   In the build-helper-maven-plugin configuration the attached artifacts
                      are retrieved from the target folder of the build. By default, Maven copies
                      resources into the target/classes folder. In order to keep these files out
                      of the bundle and off the classpath when creating the feature descriptor
                      as part of the bundle module, an additional execution of the Maven Resources
                      Plug-in is configured. The following POM fragment illustrates the configuration
                      of these executions.
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-resources-plugin</artifactId>
                  <version>2.4.3</version>
                  <executions>
                      <execution>
                          <id>copy-features</id>
                          <phase>generate-resources</phase>
                          <goals>
                              <goal>copy-resources</goal>
                          </goals>
                          <configuration>
                              <outputDirectory>target/features</outputDirectory>
                              <resources>
                                  <resource>
                                      <directory>etc/karaf-features</directory>
                                      <filtering>true</filtering>
                                  </resource>
                              </resources>
                          </configuration>
                      </execution>
                  </executions>
              </plugin>
          </plugins> -->
