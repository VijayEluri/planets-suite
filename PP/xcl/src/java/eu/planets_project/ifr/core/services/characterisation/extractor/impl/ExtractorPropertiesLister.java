package eu.planets_project.ifr.core.services.characterisation.extractor.impl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

import eu.planets_project.ifr.core.services.characterisation.extractor.xcdl.XcdlProperties;
import eu.planets_project.services.datatypes.FileFormatProperties;
import eu.planets_project.services.datatypes.FileFormatProperty;
import eu.planets_project.services.datatypes.Metric;
import eu.planets_project.services.datatypes.Metrics;
import eu.planets_project.services.utils.PlanetsLogger;
import eu.planets_project.services.utils.ProcessRunner;

/** Small tool that reads .fpm files generated by the FPMTool and skips "irrelevant" information.
 *  Produces xml files containing format properties for a given file format... 
 *  Or it returns a FileFormatProperties list with all properties for a given file format
 * @author melmsp
 *
 */

public class ExtractorPropertiesLister {
	
	/**
	 * logger
	 */
	public final static PlanetsLogger LOG = PlanetsLogger.getLogger(ExtractorPropertiesLister.class);
	
	/**
	 * xtractoer home dir
	 */
	public final static String FPMTOOL_HOME = System.getenv("FPMTOOL_HOME") + File.separator;
	/**
	 * fpm tool
	 */
	public final static String FPM_TOOL = FPMTOOL_HOME + "fpmTool";
	
	/**
	 * @param formatURI
	 * @return file format props
	 */
	public static FileFormatProperties getFileFormatProperties(URI formatURI) {
		String pronomID = formatURI.toASCIIString();
		
		if(!pronomID.contains("fmt/")) {
			LOG.error(pronomID + " is not a valid PRONOM ID!");
			System.err.println(pronomID + " is not a valid PRONOM ID!");
			return null;
		}
		else {
			if(pronomID.contains("x-fmt/")) {
				pronomID = pronomID.substring(pronomID.indexOf("x-fmt/"));
				LOG.info("Working with PronomID: " + pronomID);
			}
			else {
				pronomID = pronomID.substring(pronomID.indexOf("fmt/"));
				LOG.info("Working with PronomID: " + pronomID);
			}
		}
		
		ProcessRunner shell = new ProcessRunner();
		
		shell.setStartingDir(new File(FPMTOOL_HOME));
		
		List<String> shellCommands = new ArrayList <String>();
		shellCommands.add(FPM_TOOL);
		shellCommands.add(pronomID + ":");
		
		shell.setCommand(shellCommands);
		LOG.info("Starting FPMTool with commands: " + shellCommands.toString());
		shell.run();
		
		String processOutput = shell.getProcessOutputAsString();
		LOG.info("ProcessOutput: " + processOutput);
		String processError = shell.getProcessErrorAsString();
		LOG.info("ProcessError: " + processError);
		
		File resultFPM = new File(FPMTOOL_HOME + "fpm.fpm");
		LOG.info("Reading result file: " + resultFPM.getAbsolutePath());
		
//		byte[] resultFPMArray = ByteArrayHelper.read(resultFPM);
		
//		String inputFpmFilePath = "PC/extractor/src/resources/fpm_files/" + fileNamePronomID + ".fpm";
//		String inputFpmFilePath = resultFPM.getAbsolutePath();  
		
//		File inputFpmFile = new File(inputFpmFilePath);
		
		SAXBuilder saxBuilder = new SAXBuilder();
		FileFormatProperties fileFormatProperties = new FileFormatProperties();
		
		Document orgDoc;
		
		try {
//			List <FileFormatProperty> fileFormatProperties = new ArrayList<FileFormatProperty>();
			LOG.info("Parsing .fpm file and generating FileFormatProperties list...");
			
			orgDoc = saxBuilder.build(resultFPM);
		
			Element orgRoot = orgDoc.getRootElement();
			
			List <Element> content = orgRoot.getChildren();
			
			FileFormatProperty formatProperty = null;
//			List <Metric> metrics = null;
			Metrics metrics = null;
			
			for (Element element : content) {
				List <Element> level1Elements = element.getChildren();
				
				for (Element propertyTopLevel : level1Elements) {
					List <Element> level2Elements = propertyTopLevel.getChildren();
					formatProperty = new FileFormatProperty();
					
					for (Element property : level2Elements) {
						
						if(property.getName().equalsIgnoreCase("id")) {
							formatProperty.setId(property.getTextTrim());
							continue;
						}
						
						if(property.getName().equalsIgnoreCase("name")) {
							formatProperty.setName(property.getTextTrim());
							continue;
						}
						
						if(property.getName().equalsIgnoreCase("description")) {
							formatProperty.setDescription(property.getTextTrim());
							continue;
						}
						
						if(property.getName().equalsIgnoreCase("unit")) {
							formatProperty.setUnit(property.getTextTrim());
							continue;
						}
						
						if(property.getName().equalsIgnoreCase("type")) {
							formatProperty.setType(property.getTextTrim());
							continue;
						}
						
						if(property.getName().equalsIgnoreCase("metrics")) {
							metrics = new Metrics();
							List <Element> level3Elements = property.getChildren();
							
							for (Element m : level3Elements) {
								List <Element> level4Elements = m.getChildren();
								Metric pMetric = new Metric();
								
								for (Element metric : level4Elements) {
									if(metric.getName().equalsIgnoreCase("mId")) {
										pMetric.setId(metric.getTextTrim());
										continue;
									}
									
									if(metric.getName().equalsIgnoreCase("mName")) {
										pMetric.setName(metric.getTextTrim());
										continue;
									}
									
									if(metric.getName().equalsIgnoreCase("mDescription")) {
										pMetric.setDescription(metric.getTextTrim());
										continue;
									}
								}
								metrics.add(pMetric);
							}
						}
					}
					
					formatProperty.setMetrics(metrics);
					formatProperty.setUri( XcdlProperties.makePropertyURI(formatProperty.getId(), formatProperty.getName()) );
					LOG.info("Set metrics for FileFormatProperty ID/Name: " + formatProperty.getId() + "/" + formatProperty.getName());
					fileFormatProperties.add(formatProperty);
					metrics = null;
				}
			}
		} catch (JDOMException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//		boolean deleted = fpmTempFile.delete();
		LOG.info("Returning list of FileFormatProperties.");
		return fileFormatProperties;
	}
	
	
	/**
	 * @param formatURI
	 * @return props file
	 */
	public static File generatePropertiesFile (URI formatURI) {
		
		String formatString = formatURI.toASCIIString();
		
		if(!formatString.contains("fmt/")) {
			System.err.println(formatString + " is not a valid PRONOM ID!");
			return null;
		}
		else {
			if(formatString.contains("x-fmt/")) {
				formatString = formatString.substring(formatString.indexOf("x-fmt/"));
			}
			else {
				formatString = formatString.substring(formatString.indexOf("fmt/"));
			}
		}
		
		String puid = formatString.replace("/", "_");
		
		System.out.println("***********************************************************");
		System.out.println("Property list for PronomID: " + formatString);
		
		ProcessRunner shell = new ProcessRunner();
		
		shell.setStartingDir(new File(FPMTOOL_HOME));
		
		List<String> shellCommands = new ArrayList <String>();
		shellCommands.add(FPM_TOOL);
		shellCommands.add(formatString + ":");
		
		shell.setCommand(shellCommands);
		shell.run();
		
		File formattedFPM = new File("PC/extractor/src/resources/fpm_files/" + puid + ".xml");
		
		FileFormatProperties fileFormatProperties = getFileFormatProperties(formatURI);
		
		XMLOutputter xmlOut = new XMLOutputter();
		BufferedWriter xmlWriter;
		try {
			
			Element xclProperties = new Element("XCLProperties");
			xclProperties.setAttribute("formatPUID", puid);
			
			Document newDoc = new Document(xclProperties);
			
			Element newRoot = newDoc.getRootElement();
			
			for (FileFormatProperty ffproperty : fileFormatProperties.getProperties()) {
				Element new_property_top = new Element("property");
				
				Element name = new Element("name").setText(ffproperty.getName());
				Element id = new Element("id").setText(ffproperty.getId());
				Element description = new Element("description").setText(ffproperty.getDescription());
				Element unit = new Element("unit").setText(ffproperty.getUnit());
				Element type = new Element("type").setText(ffproperty.getType());
				Element new_metrics_top = new Element("metrics");
				
				for (Metric metric : ffproperty.getMetrics().getList()) {
					Element mName = new Element("mName").setText(metric.getName());
					new_metrics_top.addContent(mName);
					Element mId = new Element("mId").setText(metric.getId());
					new_metrics_top.addContent(mId);
					Element mDescription = new Element("mDescription").setText(metric.getDescription());
					new_metrics_top.addContent(mDescription);
				}
				
				new_property_top.addContent(name);
				new_property_top.addContent(id);
				new_property_top.addContent(description);
				new_property_top.addContent(unit);
				new_property_top.addContent(type);
				new_property_top.addContent(new_metrics_top);
				
				newRoot.addContent(new_property_top);
				
				xmlWriter = new BufferedWriter(new FileWriter(formattedFPM));
				xmlOut.output(newDoc, xmlWriter);
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("***********************************************************");
		return formattedFPM;
	}
}