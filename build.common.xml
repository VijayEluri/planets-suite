<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- deployer build                                                          -->
<!-- ======================================================================= -->

<project name="Planets-Suite Build Commons" default="deploy:ear" basedir=".">
	
  <!-- =================================================================== -->

  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${psuite.root.dir}/lib/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

  <!-- =================================================================== --> 

  <property file="${psuite.root.dir}/build.properties"/>
  
  <!-- Set the target JVM version -->
  <property name="target.jvm" value="1.5" />
  <property name="ant.build.javac.target" value="${target.jvm}" />
  
  <property environment="env"/>

  <property name="build.dir" location="${appDir}/target"/>
  <property name="build.classes.dir" location="${build.dir}/classes"/>
  <property name="build.test.classes.dir" location="${build.dir}/test"/>
  <property name="build.test.conf" location="${psuite.root.dir}/test/config"/>
  <property name="build.api.classes.dir" location="${build.dir}/api"/>
  <property name="war.build.dir" location="${appDir}/target/war"/>
  <property name="ear.build.dir" location="${appDir}/target/ear"/>

  <property name="war.base.name" value="psuite-${appName}.war"/>
  <property name="ear.base.name" value="psuite-${appName}.ear"/>
  <property name="jar.base.name" value="psuite-${appName}.jar"/>
  <property name="api.base.name" value="psuite-${appName}-api.jar"/>

  <property name="test.dir" location="${appDir}/../test/java"/>
  <property name="client.config" location="${appDir}/../test/client-config"/>
    
  <property name="reports.dir" location="${psuite.root.dir}/tests/reports"/>
  <property name="summary.dir" location="${psuite.root.dir}/tests/summary"/>

  <if>
    <isset property="if_server.dir"/>
    <then>
    <property name="jboss.home" value="${if_server.dir}"/>
    <property name="server.deploy.lib.dir" value="${if_server.dir}/server/default/lib"/>
    <property name="server.deploy.dir" value="${if_server.dir}/server/default/deploy"/>
    </then>
  </if>

  <!-- Allow proxy to be set, optionally: -->
  <if>
    <isset property="http.proxyHost"/>
    <else>
      <property name="http.proxyHost" value=""/>
    </else>
  </if>
  <if>
    <isset property="http.proxyPort"/>
    <else>
      <property name="http.proxyPort" value=""/>
    </else>
  </if>
  <if>
    <isset property="http.nonProxyHosts"/>
    <else>
      <property name="http.nonProxyHosts" value=""/>
    </else>
  </if>

  <!-- The IF server classpath -->
  <if>
    <isset property="use.if.classpath"/>
    <then>
  <path id="server_classpath">
    <fileset dir="${server.deploy.lib.dir}">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${jboss.home}/server/default/deploy/jboss-web.deployer">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${jboss.home}/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${jboss.home}/client">
      <include name="*.jar"/>
    </fileset>
  </path>
    </then>
    <else>
      <!-- This is a portable server_classpath that suffices for compilation and testing of Planets web services. -->
      <path id="server_classpath">
        <fileset dir="${psuite.root.dir}/lib">
          <include name="standalone/*.jar" />
          <include name="jaxws-ri-2.1.4/lib/*.jar"/>
          <include name="jackrabbit/*.jar"/>
        </fileset>
        <path refid="psuite_common_classpath"/>
      </path>
    </else>
  </if>

  <!-- The classpath corresponding to the shared artefacts. -->
  <path id="psuite_common_classpath">
    <fileset dir="${psuite.root.dir}/target/">
      <include name="*.jar" />
    </fileset>
  </path>    
  
  <!-- The classpath elements for the current component -->
  <path id="component_classpath">
    
    <!-- specific libs -->
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
      <exclude name="lib-jee/*.jar"/>
    </fileset>
    
    <!--include our external resources as *.xml and *.props-->
    <pathelement location="${src.resources}"/>
    <pathelement location="${build.classes.dir}"/>
    <!-- So that we can get jndi.properties for InitialContext -->
    <pathelement location="${client.config}"/>
  </path>

  <!-- Build classpath -->
  <path id="classpath">
    <path refid="server_classpath"/>
    <path refid="component_classpath"/>
  </path>

  <!-- Test classpaths -->
  <path id="build_test_classpath">
    <path refid="server_classpath"/>
    <path refid="component_classpath"/>
    <pathelement location="${build.classes.dir}"/>
    <!-- Also include the standard (common) classes .: Not sensible to use this target on common -->
    <path refid="psuite_common_classpath"/>
    <fileset dir="${psuite.root.dir}/lib">
      <include name="junit-4.*.jar" />
    </fileset>
  </path>
  
  <path id="run_test_classpath">
    <path refid="build_test_classpath"/>
    <pathelement location="${build.test.classes.dir}"/>
  </path>

  <!-- The standalone (JAX-WS,) test execution classpaths -->
  <path id="standalone_classpath">
    <fileset dir="${psuite.root.dir}/lib">
      <include name="jaxws-ri-2.*/lib/*.jar"/>
      <include name="jackrabbit/*.jar"/>
      <include name="standalone/*.jar" />
      <include name="junit-4.*.jar" />
    </fileset>
    <path refid="component_classpath"/>
    <!-- Also include the standard (common) classes .: Not sensible to use this target on IF/common -->
    <path refid="psuite_common_classpath"/>
  </path>
  
  <path id="standalone_test_classpath">
    <fileset dir="${psuite.root.dir}/lib">
      <include name="jaxws-ri-2.*/lib/*.jar"/>
      <include name="jackrabbit/*.jar"/>
      <include name="junit-4.*.jar" />
    </fileset>
    <path refid="standalone_classpath"/>
    <pathelement location="${build.test.classes.dir}"/>
  </path>
  
  <!-- Do nothing -->
  <target name="build:off">
    <echo message="Build is switched off by default."/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Prepares the common code                                            -->
  <!-- =================================================================== -->
  
  <!-- To deploy the common classes. -->
  <target name="deploy:common" unless="have.deployed.common">
    <ant dir="${psuite.root.dir}/framework/core" inheritAll="false" target="compile:common"/>
    <ant dir="${psuite.root.dir}" inheritAll="false" target="deploy:api"/>

    <!-- Update component properties files, destined for jars -->
    <copy file="${psuite.root.dir}/framework/storage/src/main/resources/eu/planets_project/ifr/core/storage/datamanager.properties.template" tofile="${psuite.root.dir}/framework/storage/src/main/resources/eu/planets_project/ifr/core/storage/datamanager.properties" />
    <replace file="${psuite.root.dir}/framework/storage/src/main/resources/eu/planets_project/ifr/core/storage/datamanager.properties">
      <replacefilter token="@planets.server.hostname@" value="${if_server.host}" />
      <replacefilter token="@planets.server.port@" value="${if_server.port}" />
    </replace>

  	<!-- Ensure any new jars are added to the classpath? -->
    <path id="psuite_common_classpath">
      <fileset dir="${psuite.root.dir}/target/">
        <include name="*.jar" />
      </fileset>
    </path>
    <echo message="Common code, and APIs, have been deployed."/>
  </target>
  
  <!-- To compile the common classes and put them in the right places. -->
  <target name="compile:common" depends="prepare">
    
    <!--compile the model-->
    <javac source="1.5" target="${target.jvm}" 
         srcdir="${src.dir}"
           destdir="${build.classes.dir}"
           debug="on"
           deprecation="on"
           optimize="off"
           includes="**">
      <classpath refid="classpath"/>
    </javac>
    
    <!-- Also copy the resources into the right place -->
    <copy toDir="${build.classes.dir}" flatten="false" failonerror="false">
      <fileset dir="${src.resources}">
        <include name="**/*" />
      </fileset>
    </copy>

    <!-- Also copy .properties files if they exist! -->
    <copy toDir="${build.classes.dir}" flatten="false" failonerror="false">
      <fileset dir="${src.dir}">
        <include name="**/*.properties" />
      </fileset>
    </copy>
    
    <!-- build the jar -->
    <jar jarfile="${build.dir}/${jar.base.name}">
      <fileset dir="${build.classes.dir}"/>
    </jar>
    
    <!-- And deploy the common jars into the right places -->
    <copy file="${build.dir}/${jar.base.name}" todir="${psuite.root.dir}/target"/>
    <if>
      <isset property="server.deploy.lib.dir"/>
      <then>
        <copy file="${build.dir}/${jar.base.name}" todir="${server.deploy.lib.dir}"/>
      </then>
      <else>
        <echo message="Cannot deploy, as no server lib directory is defined."/>
      </else>
    </if>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare">
    <mkdir dir="${psuite.root.dir}/target"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${war.build.dir}"/>
    <mkdir dir="${ear.build.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${build.test.classes.dir}"/>
    <mkdir dir="${build.api.classes.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source code                                            -->
  <!-- =================================================================== -->
  <target name="build:api" if="src.api.includes">
    <ant target="prepare"/>
    <javac source="1.5" target="${target.jvm}" 
         srcdir="${src.dir}"
           destdir="${build.api.classes.dir}"
           debug="on"
           listfiles="yes"
           deprecation="on"
           optimize="off"
           includes="${src.api.includes}">
      <classpath refid="classpath"/>
    </javac>
    <!-- And package into place -->
    <jar jarfile="${build.dir}/${api.base.name}">
      <fileset dir="${build.api.classes.dir}"/>
    </jar>
    <copy file="${build.dir}/${api.base.name}" todir="${psuite.root.dir}/target"/>    
    <if>
      <isset property="server.deploy.lib.dir"/>
      <then>
        <copy file="${build.dir}/${api.base.name}" todir="${server.deploy.lib.dir}"/>
      </then>
    </if>
  </target>
  
  <target name="compile" depends="prepare, build:api, deploy:common">
    <echo message="ant.java.version: ${ant.java.version}" />
    <echo message="target.java.version: ${target.jvm}" />
    
    <!--compile the model-->
    <javac source="1.5" target="${target.jvm}" 
         srcdir="${src.dir}"
           destdir="${build.classes.dir}"
           debug="on"
           deprecation="on"
           optimize="off"
           includes="**"
           excludes="${src.api.includes}">
      <classpath refid="classpath"/>
    </javac>
    
    <!-- Also copy the libs into the right place -->
    <copy toDir="${build.classes.dir}" flatten="true" failonerror="false">
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
        <exclude name="lib-jee/*.jar"/>
      </fileset>
    </copy>
    
    <!-- Also copy the resources into the right place -->
    <copy toDir="${build.classes.dir}" flatten="false" failonerror="false">
      <fileset dir="${src.resources}">
        <include name="**/*.properties" />
        <include name="**/*.xml" />
      	<include name="**/*.rng"/>
      	<include name="**/*.xsd"/>
      	<include name="**/*.dtd"/>
      	<include name="**/*.jar"/>
        <include name="import.sql"/>
        <include name="seam.properties"/>
        <include name="META-INF/persistence.xml"/>
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/orm.xml"/>
        <include name="META-INF/components.xml"/>
        <include name="META-INF/jboss.xml"/>
        <include name="META-INF/security-config.xml"/>
        <include name="META-INF/security-rules.drl"/>
        <exclude name="META-INF/application.xml"/>
      </fileset>
    </copy>
    
  </target>
  
  <!-- =================================================================== -->
  
  <target name="compile:tests" depends="compile" if="test.src.dir">
    <!--compile the test-classes, session beans, etc.-->
    <javac source="1.5" target="${target.jvm}"
           srcdir="${test.src.dir}"
           destdir="${build.test.classes.dir}"
           debug="on"
           deprecation="on"
           optimize="off"
           includes="**">
           <classpath refid="standalone_test_classpath"/>
    </javac>
    <javac source="1.5" target="${target.jvm}"
           srcdir="${src.dir}"
           destdir="${build.test.classes.dir}"
           debug="on"
           deprecation="on"
           optimize="off"
           includes="**">
           <classpath refid="standalone_test_classpath"/>
    </javac>
    
    <!-- Also copy the libs into the right place -->
    <if>
      <isset property="test.lib.dir"/>
      <then>
    <copy toDir="${build.test.classes.dir}" flatten="true" failonerror="false">
      <fileset dir="${test.lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
      </then>
    </if>
    
    <!-- Also copy the resources into the right place -->
    <if>
      <isset property="test.resources"/>
      <then>
    <copy toDir="${build.test.classes.dir}" flatten="false" failonerror="false">
      <fileset dir="${test.resources}">
        <include name="**/*" />
      </fileset>
    </copy>
        </then>
      </if>
    
  </target>
  
  <!-- =================================================================== -->
  
  <target name="compile:jar" depends="undeploy,compile">
    <jar jarfile="${build.dir}/${jar.base.name}">
      <fileset dir="${build.classes.dir}"/>
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- =================================================================== -->
  <!-- =================================================================== -->

  <target name="test" description="executes the included JUnit tests" depends="test:src-defined, compile:tests">
    <!-- Attempt all three test modes -->
    <ant target="test:local"/>
    <ant target="test:standalone"/>
    <!-- default to tests ON -->
    <if>
      <isset property="test.on.server"/>
      <else>
        <property name="test.on.server" value="true"/>
      </else>
    </if>
    <!-- run with server if you want -->
    <if>
      <equals arg1="${test.on.server}" arg2="true"/>
      <then>
        <ant target="test:server"/>
      </then>
    </if>
    <!-- collect the results into a summary report -->
    <ant target="test:gen:summary" />
  </target>

  <!-- collect the results into a summary report -->
  <target name="test:gen:summary">
    <mkdir dir="${summary.dir}/local"/>
    <junitreport todir="${summary.dir}/local">
      <fileset dir="${reports.dir}">
        <include name="TEST-*-local.xml"/>
      </fileset>
      <report format="frames" todir="${summary.dir}/local">
        <param name="TITLE" expression="Unit Test Results: LOCAL MODE"/>
      </report>
    </junitreport>

    <mkdir dir="${summary.dir}/standalone"/>
    <junitreport todir="${summary.dir}/standalone">
      <fileset dir="${reports.dir}">
        <include name="TEST-*-standalone.xml"/>
      </fileset>
      <report format="frames" todir="${summary.dir}/standalone">
        <param name="TITLE" expression="Unit Test Results: STANDALONE MODE"/>
      </report>
    </junitreport>

    <mkdir dir="${summary.dir}/server"/>
    <junitreport todir="${summary.dir}/server">
      <fileset dir="${reports.dir}">
        <include name="TEST-*-server.xml"/>
      </fileset>
      <report format="frames" todir="${summary.dir}/server">
        <param name="TITLE" expression="Unit Test Results: SERVER MODE"/>
      </report>
    </junitreport>

    <junitreport todir="${summary.dir}">
      <fileset dir="${reports.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${summary.dir}">
        <param name="TITLE" expression="Unit Test Results: ALL MODES"/>
      </report>
    </junitreport>
    <echo message="Wrote summary test report to: ${summary.dir}" />
  </target>
  
  <!-- This is required when running under Java 6, which ships with JAXB 2.0 not 2.1. -->
  <!-- FIXME This does not seem to work at the moment, and J6 on Linux fails when calling services on the TB.
        You get: javax.xml.ws.WebServiceException: java.lang.UnsupportedOperationException: setProperty must be overridden by all subclasses of SOAPMessage ...
   -->
  <property name="test.vmarg.boot.classpath" 
    value="-Xbootclasspath/p:lib/endorsed/jaxb-api.jar;lib/endorsed/jaxb-impl.jar;lib/endorsed/activation.jar;lib/endorsed/stax-ex.jar;lib/endorsed/jsr173_api.jar;lib/endorsed/jboss-native-saaj.jar"/>
  
  <target name="test:local" description="executes the included JUnit tests w/o a server" depends="test:src-defined,compile:tests" if="test.local">
    <echo message="TEST:LOCAL: Testing the service code without a server."/>
    <!-- Invoke the tests -->
    <junit fork="yes" haltonfailure="no" dir="${psuite.root.dir}" printsummary="withOutAndErr" showoutput="true">
      <jvmarg value="${test.vmarg.boot.classpath}"/>
      <classpath refid="run_test_classpath" />
      <sysproperty key="eu.planets-project.config.dir" value="${build.test.conf}"/>
      <sysproperty key="http.proxyHost" value="${http.proxyHost}"/>
      <sysproperty key="http.proxyPort" value="${http.proxyPort}"/>
      <sysproperty key="http.nonProxyHosts" value="${http.nonProxyHosts}"/>
      <!-- Test config -->
      <sysproperty key="psuite.test.context" value="local"/>
      <sysproperty key="psuite.root.dir" value="${psuite.root.dir}"/>
      <!-- Set this property so that the PlanetsLogger can start up okay. -->
      <sysproperty key="jboss.server.log.dir" value="${psuite.root.dir}"/>
      
      <batchtest fork="yes" todir="${reports.dir}">
        <formatter type="xml" extension="-local.xml"/>
        <fileset dir="${test.src.dir}">
          <include name="**/*Suite*.java"/>
          <include name="**/*Testsuite*.java"/>
        </fileset>
      </batchtest>
      
    </junit>
  </target>
  
  <target name="test:standalone" description="executes the included JUnit tests in a standalone content (no I.F.)" depends="test:src-defined,compile:tests" if="test.standalone">
    <echo message="TEST:STANDALONE: Testing the service code using a standalone server."/>
  	<!-- Set the test config directory if the property is not set -->
    <!-- Invoke the tests -->
    <junit fork="yes" haltonfailure="no" dir="${psuite.root.dir}" printsummary="withOutAndErr" showoutput="true">
      <jvmarg value="${test.vmarg.boot.classpath}"/>
      <classpath refid="standalone_test_classpath" />
        <sysproperty key="eu.planets-project.config.dir" value="${build.test.conf}"/>
      <sysproperty key="http.proxyHost" value="${http.proxyHost}"/>
      <sysproperty key="http.proxyPort" value="${http.proxyPort}"/>
      <sysproperty key="http.nonProxyHosts" value="${http.nonProxyHosts}"/>
      <!-- Test config -->
      <sysproperty key="psuite.test.context" value="standalone"/>
      <sysproperty key="psuite.root.dir" value="${psuite.root.dir}"/>
      <!-- Set this property so that the PlanetsLogger can start up okay. -->
      <sysproperty key="jboss.server.log.dir" value="${psuite.root.dir}"/>
      
      <batchtest fork="yes" todir="${reports.dir}">
        <formatter type="xml" extension="-standalone.xml"/>
        <fileset dir="${test.src.dir}">
          <include name="**/*Suite*.java"/>
          <include name="**/*Testsuite*.java"/>
        </fileset>
      </batchtest>
      
    </junit>
  </target>
  
  <target name="test:server" description="executes the included JUnit tests against a running server" depends="test:src-defined,compile:tests,test:server-defined" if="test.server">
    <echo message="TEST:SERVER: Testing the service code against the server ${if_server.host}:${if_server.port}."/>
    <if>
      <isset property="if_server.host"/>
      <else>
        <fail message="You must set the if_server.host and if_server.port properties to specifyt the server to be tested."/>
      </else>
    </if>
    <if>
      <isset property="if_server.port"/>
      <else>
        <fail message="You must set the if_server.host and if_server.port properties to specify the server to be tested."/>
      </else>
    </if>
    <!-- Emit the property to the ant console -->
    <property name="echoclasspath" refid="run_test_classpath"/>
    <!-- echo message="Classpath = ${echoclasspath}"/ -->
    <!-- Invoke the tests -->
    <junit fork="yes" haltonfailure="no" dir="${psuite.root.dir}" printsummary="withOutAndErr" showoutput="true">
      <jvmarg value="${test.vmarg.boot.classpath}"/>
      <classpath refid="run_test_classpath" />
      <sysproperty key="http.proxyHost" value="${http.proxyHost}"/>
      <sysproperty key="http.proxyPort" value="${http.proxyPort}"/>
      <sysproperty key="http.nonProxyHosts" value="${http.nonProxyHosts}"/>
      <sysproperty key="eu.planets-project.config.dir" value="${build.test.conf}"/>
      <!--
      <sysproperty key="file.encoding" value="utf-8"/>
      <sysproperty key="line.separator" value="\n"/>
      -->
      <!-- Test config -->
      <sysproperty key="psuite.test.context" value="server"/>
      <sysproperty key="psuite.root.dir" value="${psuite.root.dir}"/>
      <sysproperty key="psuite.test.host" value="${if_server.host}"/>
      <sysproperty key="psuite.test.port" value="${if_server.port}"/>
      <!-- Set this property so that the PlanetsLogger can start up okay. -->
      <sysproperty key="jboss.server.log.dir" value="${psuite.root.dir}"/>
      
      <batchtest fork="yes" todir="${reports.dir}">
        <formatter type="xml" extension="-server.xml"/>
        <fileset dir="${test.src.dir}">
          <include name="**/*Suite*.java"/>
          <include name="**/*Testsuite*.java"/>
        </fileset>
      </batchtest>
      
    </junit>
  </target>
  
  <!-- Conditional test execution, used in the global build -->
  <target name="test-if-testable" if="test.src.dir">
    <ant target="test"/>
  </target>
  
  <!-- Check the tests are set up okay -->
  <target name="test:src-defined" unless="test.src.dir">
    <fail message="You must define 'test.src.dir' in order to run the tests."/>
  </target>
  
  <!-- Check that the server has been defined if testing against a server. -->
  <target name="test:server-defined">
    <fail message="You must define the if_server.host and if_server.port in the build.properties in order to test against a server." unless="if_server.host"/>
    <fail message="You must define the if_server.host and if_server.port in the build.properties in order to test against a server." unless="if_server.port"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Cleans up generated stuff on JBoss                                          -->
  <!-- =================================================================== -->

  <target name="clean" description="cleans the build dir">
    <delete dir="${build.dir}"/>
  </target>
  
  <target name="clean:build" description="cleans the top-level psuite build" depends="clean">
    <delete dir="${psuite.root.dir}/target"/>
  </target>

  <target name="undeploy" description="undeploy the testbed application from the JBoss application server">
    <if>
      <isset property="server.deploy.dir"/>
      <then>
        <delete file="${server.deploy.dir}/${war.base.name}" failonerror="false"/>
        <delete file="${server.deploy.dir}/${ear.base.name}" failonerror="false"/>
        <delete file="${server.deploy.dir}/${jar.base.name}" failonerror="false"/>
        <delete file="${server.deploy.lib.dir}/${api.base.name}" failonerror="false"/>
      </then>
    </if>
  </target>

  <!-- =================================================================== -->
  <!-- Helper targets to start the JBoss in a new cmd window (on Windows)                                         -->
  <!-- =================================================================== -->
  <target name="startjboss" description="launches the Jboss application server" if="jboss.home">
    <exec dir="${jboss.home}/bin" executable="cmd.exe" spawn="true">
      <arg value="/c start run.bat"/>
    </exec>
  </target>

  <!-- =================================================================== -->

  <target name="dist:war">
    <mkdir dir="${war.build.dir}/${appName}" />
    <mkdir dir="${war.build.dir}/${appName}/WEB-INF/lib" />
    <mkdir dir="${war.build.dir}/${appName}/WEB-INF/classes" />
    
    <javac source="1.5" target="${target.jvm}" debug="true" srcdir="${src.dir}" destdir="${war.build.dir}/${appName}/WEB-INF/classes">
      <classpath refid="classpath"/>
    </javac>
    
    <if>
      <isset property="src.web"/>
      <then>
        <copy todir="${war.build.dir}/${appName}">
         <fileset dir="${src.web}" casesensitive="yes">
          <include name="**/*.*" />
         </fileset>
        </copy>
      </then>
    </if>

    <copy todir="${war.build.dir}/${appName}/WEB-INF/classes">
      <fileset dir="${src.resources}">
        <include name="**/*.properties" />
        <include name="**/*.xml" />
      	<include name="**/*.jar" />
    	<include name="**/*.rng"/>
      	<include name="**/*.xsd"/>
      	<include name="**/*.dtd"/>
      </fileset>
    </copy>
    
    <!--
    <copy file="${build.dir}/${jar.base.name}" todir="${war.build.dir}/${appName}/WEB-INF/lib"/>
    -->
    <copy todir="${war.build.dir}/${appName}/WEB-INF/lib">
      <fileset dir="${lib.dir}">
        <include name="**/*.jar" />
      </fileset>
    </copy>
    
    <jar jarfile="${build.dir}/${war.base.name}" 
     basedir="${war.build.dir}/${appName}"/>
  </target>

  <!-- =================================================================== -->

  <target name="dist:ear">
    <mkdir dir="${ear.build.dir}/${appName}" />
    <mkdir dir="${ear.build.dir}/${appName}/WEB-INF/lib" />
    <mkdir dir="${ear.build.dir}/${appName}/WEB-INF/classes" />

    <if>
      <isset property="src.web"/>
      <then>
    <copy todir="${ear.build.dir}/${appName}">
        <fileset dir="${src.web}" casesensitive="yes">
        <include name="**/*.*" />
      </fileset>
    </copy>
      </then>
    </if>

    <copy todir="${ear.build.dir}/${appName}/WEB-INF/classes">
      <fileset dir="${src.resources}">
        <include name="**/*.properties" />
        <include name="**/*.xml" />
    	<include name="**/*.rng"/>
      	<include name="**/*.xsd"/>
      	<include name="**/*.dtd"/>
      </fileset>
    </copy>
    
    <copy file="${build.dir}/${jar.base.name}" todir="${ear.build.dir}" />
    
    <jar jarfile="${ear.build.dir}/${war.base.name}" 
     basedir="${ear.build.dir}/${appName}"/>

      <!-- Also copy the libs into the right place -->
    <if>
      <isset property="ear.lib.dir"/>
      <then>
      <copy toDir="${ear.build.dir}" flatten="true" failonerror="false">
        <fileset dir="${ear.lib.dir}">
          <include name="**/*.jar"/>
          <exclude name="lib-jee/*.jar"/>
        	
        </fileset>
      </copy>
        </then>
      </if>
    
    <ear destfile="${build.dir}/${ear.base.name}" 
          appxml="${src.resources}/META-INF/application.xml">
      <fileset dir="${ear.build.dir}" includes="*.jar,*.war"/>
      <fileset dir="${src.resources}">
        <!-- include name="META-INF/application.xml"/ -->
        <include name="META-INF/jboss-app.xml"/>
        <include name="META-INF/*-service.xml"/>
        <include name="META-INF/*-xmbean.xml"/>
        <include name="treecache.xml"/>
        <include name="*.jpdl.xml"/>
        <exclude name=".gpd.*"/>
        <include name="*.cfg.xml"/>
        <include name="*.xsd"/>
        <include name="*.drl"/>
      </fileset>
    </ear>

  </target>

  <!-- =================================================================== -->

  <target name="build:war" depends="compile:jar, dist:war" description="builds the web application"/>

  <target name="build:ear" depends="compile:jar, dist:ear" description="builds the application"/>

  <!-- =================================================================== -->
  
  <target name="share:jar" depends="undeploy,compile, compile:jar">
    <copy file="${build.dir}/${jar.base.name}" todir="${psuite.root.dir}/target"/>
  </target>

  <!-- =================================================================== -->
  
  <target name="deploy:pure-java">
    <if>
      <equals arg1="${psuite.app.deploy.mode}" arg2="pure-java"/>
      <then>
        <ant target="deploy"/>
      </then>
    </if>
  </target>
  
  <!-- =================================================================== -->

  <target name="test:pure-java">
    <if>
      <equals arg1="${psuite.app.deploy.mode}" arg2="pure-java" />
        <then>
          <ant target="test-if-testable" />
        </then>
    </if>
  </target>

  <!-- =================================================================== -->

  <target name="deploy" depends="check-build-type-set">
    <if>
      <equals arg1="${psuite.app.deploy.mode}" arg2="none"/>
      <then>
        <echo message="This component is not set to be deployed by default, and must be deployed manually, e.g. deploy:war."/>
      </then>
      <else>
    <!-- Then choose the deploy type -->
    <if>
      <equals arg1="${psuite.app.build.type}" arg2="ejb"/>
      <then>
        <echo message="Deploying as an EJB."/>
        <ant target="deploy:ejb"/>
      </then>
    </if>
    <if>
      <equals arg1="${psuite.app.build.type}" arg2="war"/>
      <then>
        <echo message="Deploying as a WAR."/>
        <ant target="deploy:war"/>
      </then>
    </if>
    <if>
      <equals arg1="${psuite.app.build.type}" arg2="ear"/>
      <then>
        <echo message="Deploying as an EAR."/>
        <ant target="deploy:ear"/>
      </then>
    </if>
    <if>
      <equals arg1="${psuite.app.build.type}" arg2="jar"/>
      <then>
        <echo message="Deploying as a JAR."/>
        <ant target="deploy:jar"/>
      </then>
    </if>
        
      </else>
    </if>
  </target>

  <target name="check-build-type-set" unless="psuite.app.build.type">
    <fail message="You must define the component build type 'psuite.app.build.type' in order compile it (ejb, war, ear)."/>
  </target>
  
  <!-- =================================================================== -->

  <target name="deploy:ejb" depends="compile:jar">
    <if>
      <isset property="server.deploy.dir"/>
      <then>
    <copy file="${build.dir}/${jar.base.name}" todir="${server.deploy.dir}"/>
      </then>
      <else>
        <echo message="Cannot deploy, as no deployment directory is defined."/>
      </else>
    </if>
  </target>

  <!-- =================================================================== -->

  <target name="deploy:jar" depends="compile:jar" if="server.deploy.lib.dir">
    <if>
      <isset property="server.deploy.lib.dir"/>
      <then>
    <copy file="${build.dir}/${jar.base.name}" todir="${server.deploy.lib.dir}"/>
      </then>
      <else>
        <echo message="Cannot deploy, as no server lib directory is defined."/>
      </else>
    </if>
  </target>

  <target name="deploy:war" depends="undeploy, build:war">
    <if>
      <isset property="server.deploy.dir"/>
      <then>
      <copy file="${build.dir}/${war.base.name}" todir="${server.deploy.dir}"/>
      </then>
      <else>
        <echo message="Cannot deploy, as no deployment directory is defined."/>
      </else>
    </if>
  </target>

  <target name="deploy:ear" depends="undeploy, build:ear" 
        description="DEFAULT builds and deploy the ear">
    <if>
      <isset property="server.deploy.dir"/>
      <then>
    <copy file="${build.dir}/${ear.base.name}" todir="${server.deploy.dir}" />
    </then>
    <else>
        <echo message="Cannot deploy, as no deployment directory is defined."/>
    </else>
  </if>
  </target>

  <!-- =================================================================== -->
  
  <target name="show:type">
    <dirname property="sub.build.dir" file="${ant.file}"/>
    <basename property="proj.sub.sub" file="${sub.build.dir}"/>
    
    <dirname property="proj.sub.sub.dir" file="${sub.build.dir}"/>
    <basename property="proj.sub" file="${proj.sub.sub.dir}"/>
    
    <property name="proj.sub.path" value="${proj.sub}/${proj.sub.sub}"/>
    
    <property name="property.list.file" value="${psuite.root.dir}/property-types.txt"/>
    
    <if>
      <not>
        <isset property="psuite.app.deploy.mode"/>
      </not>
      <then>
        <property name="psuite.app.deploy.mode" value="????????"/>
      </then>
    </if>
    <if>
      <not>
        <isset property="psuite.app.build.type"/>
      </not>
      <then>
        <property name="psuite.app.build.type" value="????????"/>
      </then>
    </if>
    
    <if>
      <isset property="test.local"/>
      <then>
        <property name="test.l" value="y"/>
      </then>
      <else>
        <property name="test.l" value="-"/>
      </else>
    </if>
    <if>
      <isset property="test.standalone"/>
      <then>
        <property name="test.a" value="y"/>
      </then>
      <else>
        <property name="test.a" value="-"/>
      </else>
    </if>
    <if>
      <isset property="test.server"/>
      <then>
        <property name="test.s" value="y"/>
      </then>
      <else>
        <property name="test.s" value="-"/>
      </else>
    </if>
    
    <echo file="${property.list.file}" message="${proj.sub.path} | ${psuite.app.deploy.mode} | ${psuite.app.build.type} | ${test.l} | ${test.a} | ${test.s} ${line.separator}" append="true"/>
  </target>
  
</project>
