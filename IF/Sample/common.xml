<?xml version="1.0" encoding="UTF-8"?>

<project name="commonlib">

    <dirname property="root.dir" file="${ant.file.commonlib}" />

	<dirname property="java.home.path" file="${java.home}"/>

	
	<property file="${root.dir}/project.properties"/>
	<property file="${root.dir}/framework.properties"/>
	
	<property name="ant.home" environment="ENV" value="${ENV.ANT_HOME}"/>
	<property name="root.lib.dir" value="${root.dir}${file.separator}appserver.lib"/>	    
	<property name="root.build.dir" value="${root.dir}${file.separator}build" />
	<property name="root.dist.dir" value="${root.dir}${file.separator}dist" />
	<property name="api.build.dir" value="${root.build.dir}${file.separator}api" />
	<property name="api.build.src.dir" value="${api.build.dir}${file.separator}src" />
	<property name="api.build.classes.dir" value="${api.build.dir}${file.separator}classes" />
	
	<!--property name="framework.dir" value="${root.dir}${file.separator}appserver" /-->	

	<property name="components.dir" value="${root.dir}${file.separator}components" />
	<property name="javadoc.dir" value="${root.build.dir}${file.separator}javadoc" />
	<property name="test.javadoc.dir" value="${root.build.dir}${file.separator}test-javadoc" />

	<property name="targets.status.file" value="${root.build.dir}${file.separator}targets.status"/>
	
	<property name="releases.exclude" value=""/>
		

    <condition property="file.protocol" value="file:///">
        <os family="windows" />
    </condition>
    
    <condition property="file.protocol" value="">
        <not>
            <os family="windows" />
        </not>
    </condition>
    
	
    <condition property="separator.regexp" value="\\">
        <os family="windows"/>
    </condition>
    <condition property="separator.regexp" value="/">
        <not>
            <os family="windows"/>
        </not>
    </condition>
	
	
	<tstamp/>

	
    <path id="build.classpath">
        <fileset dir="${root.lib.dir}/build" >
            <include name="*.jar" />
        </fileset>
    </path>
	
		
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath refid="build.classpath" />
   </taskdef>

	<var name="endorsed.dirs" value=""/>
	<for param="dir">
		<path>
			<dirset dir="${components.dir}" includes="**/endorsed"/>		
			<dirset dir="${root.lib.dir}" includes="**/endorsed"/>		
			<!-- dirset dir="${framework.dir}" includes="**/endorsed"/-->		
		</path>	
		<sequential>
			<if>
				<length length="0" string="${endorsed.dirs}"/>
				<then>
					<var name="endorsed.dirs" value="@{dir}"/>
				</then>
				<else>	
					<var name="endorsed.dirs" value="${endorsed.dirs}${path.separator}@{dir}"/>
				</else>
			</if>		
		</sequential>	
	</for>

	<macrodef name="code-compile">
			<attribute name="srcdir" />
			<attribute name="destdir" />
			<attribute name="includes" default="**/*.java"/>
			<attribute name="classpathref" />
			<sequential>
			    <echo> Compiling Java Code ...</echo>
				<javac debug="${project.code.debug}" 
						deprecation="true" 
						destdir="@{destdir}" 
						srcdir="@{srcdir}" 
						classpathref="@{classpathref}"
						includes="@{includes}"
						source="1.5"/>
						<!--source="${project.code.version}"/>-->
			</sequential>
	</macrodef>

	<macrodef name="load-targets-status">
		<sequential>
			<if>
				<available file="${targets.status.file}"/>
				<then>
					<var file="${targets.status.file}" />
				</then>
			</if>		
		</sequential>
	</macrodef>	


	<macrodef name="write-targets-status">
		<sequential>
			<mkdir dir="${root.build.dir}"/>
			<echoproperties destfile="${targets.status.file}" format="text" prefix="already.executed"/>
		</sequential>
	</macrodef>	

	<macrodef name="remove-targets-status">
		<sequential>
			<delete file="${targets.status.file}" verbose="false" quiet="true" failonerror="false" />
		</sequential>
	</macrodef>
	
	<macrodef name="is-executed">
		<attribute name="component"/>
		<attribute name="target"/>
		<sequential>
			<if>
				<not>
					<isset property="already.executed.@{target}"/>
				</not>	
			<then>
				<var name="already.executed.@{target}" value=""/>
			</then>
			</if>	

			<var name="is.executed" value="false"/>
			<for param="c" list="${already.executed.@{target}}" trim="yes">
				<sequential>
					<if>
						<equals arg1="@{c}" arg2="@{component}" casesensitive="yes"/>
					<then>
						<var name="is.executed" value="true"/>
					</then>
					</if>	
				</sequential>
			</for>	
		</sequential>
	</macrodef>	
	
	<macrodef name="executed">
		<attribute name="component"/>
		<attribute name="target"/>
		<sequential>
			<is-executed target="@{target}" component="@{component}"/>
			<if>
				<equals arg1="${is.executed}" arg2="false"/>
			<then>	
				<if>
					<not>
						<length string="${already.executed.@{target}}" length="0"/>
					</not>	
				<then>
					<var name="already.executed.@{target}" value="${already.executed.@{target}},@{component}"/>
				</then>
				<else>
					<var name="already.executed.@{target}" value="@{component}"/>				
				</else>				
				</if>
				<write-targets-status/>
			</then>
			</if>	
		</sequential>
	</macrodef>			
	
	<macrodef name="reset-executed">
		<attribute name="target"/>
		<sequential>
			<var name="already.executed.@{target}" value=""/>				
			<write-targets-status/>
		</sequential>	
	</macrodef>	

		
	<macrodef name="iterate">
        <attribute name="target"/>
		<attribute name="components" default="*"/>
		<attribute name="exclude" default=""/>
		<attribute name="failonerror" default="yes"/>
		<attribute name="clean-status" default="false" />
        <sequential>
        	<invoke components="@{components}" target="@{target}" exclude="@{exclude}" failonerror="@{failonerror}" clean-status="@{clean-status}">
        		<properties>
        			<property name="dont.remove.status.file" value="true"/>
        		</properties>	
        	</invoke>
        </sequential>
        
    </macrodef>

	<macrodef name="invoke">
        <attribute name="target"/>
		<attribute name="components" default="*"/>
		<attribute name="exclude" default=""/>
		<attribute name="failonerror" default="yes"/>		
		<element name="properties" optional="yes" />
		<attribute name="clean-status" default="false" />
        <sequential>
        	<var name="excludes.pattern" value="**/build/**"/>
    		<for param="component" list="@{exclude}" trim="yes">
    			<sequential>
    				<if>
    					<length length="0" string="${excludes.pattern}"/>
    					<then>
    						<var name="excludes.pattern" value="${excludes.pattern}components/@{component}/build.xml"/>
    					</then>
    					<else>	
    						<var name="excludes.pattern" value="${excludes.pattern},components/@{component}/build.xml"/>
    					</else>
    				</if>		
    			</sequential>	
    		</for>
        	<var name="includes.pattern" value=""/>
    		<for param="component" list="@{components}" trim="yes">    		    
    			<sequential>
    				<if>
    					<length length="0" string="${includes.pattern}"/>
    					<then>
    						<var name="includes.pattern" value="${includes.pattern}components/@{component}/build.xml"/>
    					</then>
    					<else>	
    						<var name="includes.pattern" value="${includes.pattern},components/@{component}/build.xml"/>
    					</else>
    				</if>		
    				<echo level="debug">includes.pattern = ${includes.pattern}</echo>
    			</sequential>	
    		</for>
        	
			<if>
				<not>
					<length length="0" string="${includes.pattern}"/>
				</not>
			<then>		
	        	<for param="build.file">
	        		<path>
	        			<fileset dir="${root.dir}" includes="${includes.pattern}" excludes="${excludes.pattern}"/>	
	        		</path>
	        		<sequential>
	        			<dirname file="@{build.file}" property="component.full.path"/>
	        			<var name="test" value="@{build.file}"/>
                        <echo level="debug">build.file = ${test}</echo>	        		
	        			<basename file="${component.full.path}" property="component.to.run"/>
	        			<is-executed target="@{target}" component="${component.to.run}"/>
	        			<if>
	        				<equals arg1="${is.executed}" arg2="false"/>
	        			<then>       				
	        				<write-targets-status/>
		            		<ant antfile="@{build.file}" target="@{target}" inheritall="false" inheritrefs="false" >
		            			<property name="dont.remove.status.file" value="true"/>
		            			<properties/>
		            		</ant>
	        				<load-targets-status/>
	        				<executed target="@{target}" component="${component.to.run}"/>	        				        				
	        			</then>
	        			</if>	
	        			<var name="component.full.path" unset="true"/>
	        			<var name="component.to.run" unset="true"/>
	            	</sequential>
	        	</for>	
			</then>
			</if>	
        </sequential>
        
    </macrodef>

	<macrodef name="invoke-ant">
        <attribute name="target"/>	
		<attribute name="antfile"/>
		<element name="properties" optional="yes" />
		<sequential>
			<ant antfile="@{antfile}" target="@{target}" inheritall="false" inheritrefs="false" >
				<property name="dont.remove.status.file" value="true"/>
				<properties/>
			</ant>
		</sequential>
	</macrodef>
	
	<macrodef name="call">
        <attribute name="target"/>	
		<sequential>
			<antcall target="@{target}" inheritall="true" inheritrefs="true">
				<param name="dont.remove.status.file" value="true"/>
			</antcall>
		</sequential>
	</macrodef>

		

</project>