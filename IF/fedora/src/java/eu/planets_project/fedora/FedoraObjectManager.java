package eu.planets_project.fedora;

import eu.planets_project.fedora.queries.TripleStoreQuery;
import eu.planets_project.fedora.connector.FedoraConnectionException;
import eu.planets_project.fedora.connector.FedoraConnector;
import eu.planets_project.fedora.connector.ParseException;
import eu.planets_project.fedora.connector.StoreException;
import eu.planets_project.fedora.connector.planets.Datastream;
import eu.planets_project.fedora.connector.planets.PlanetsDatastream;
import eu.planets_project.ifr.core.storage.api.DigitalObjectManager;
import eu.planets_project.ifr.core.storage.api.query.Query;
import eu.planets_project.ifr.core.storage.api.query.QueryString;
import eu.planets_project.ifr.core.storage.api.query.QueryValidationException;
import eu.planets_project.services.datatypes.Content;
import eu.planets_project.services.datatypes.DigitalObject;
import eu.planets_project.services.datatypes.Metadata;

import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.w3c.dom.Document;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.JAXBException;
import javax.xml.bind.JAXBElement;

/**
 * TODO abr forgot to document this class
 */
public class FedoraObjectManager implements DigitalObjectManager{


    FedoraConnector fedora;
    private boolean initialised = false;

    public static final String PLANETS_DATASTREAM = "PLANETS";



    public FedoraObjectManager(String username, String password, String server) throws FedoraConnectionException {
        fedora = new FedoraConnector(username,password,server);
    }



    public URI storeAsNew(DigitalObject digitalObject) throws DigitalObjectNotStoredException {


        String pid = null;
        try {
            pid = fedora.newObject();
        } catch (FedoraConnectionException e) {
            throw new DigitalObjectNotStoredException(e);
        } catch (StoreException e) {
            throw new DigitalObjectNotStoredException(e);
        }

        URI pdUri = null;
        try {
            pdUri = fedora.pid2Uri(pid);
        } catch (ParseException e) {//Autogenerated pid not valid.....
            throw new DigitalObjectNotStoredException(e);
        }
        try{
            updateExisting(pdUri,digitalObject);
        }
        catch (DigitalObjectNotStoredException e){
            try {
                fedora.purgeObject(pid);

            } catch (FedoraConnectionException e1) {
                throw new DigitalObjectNotStoredException(e1);
            } catch (DigitalObjectNotFoundException e1) {
                //not stored anyhow, thats fine;
            }
            throw new DigitalObjectNotStoredException(e);
        } catch (DigitalObjectNotFoundException e) { //newly created object not foudn....
            throw new DigitalObjectNotStoredException(e);
        }
        return pdUri;
    }

    public URI updateExisting(URI pdURI, DigitalObject digitalObject) throws DigitalObjectNotStoredException, DigitalObjectNotFoundException {

        String pid = fedora.uri2Pid(pdURI);

        try {
            boolean exists = fedora.exists(pid);
            if (!exists){
                throw new DigitalObjectNotStoredException("Object does not already exist");
            }
        } catch (FedoraConnectionException e) {
            throw new DigitalObjectNotStoredException(e);
        }

        if (!isWritable(pdURI)){
            throw new DigitalObjectNotStoredException("This object is not writable");
        }

        String planetsModel;
        try {
            if (!fedora.isPlanetsObject(pid)){
                throw new DigitalObjectNotStoredException("pdURI "+pdURI.toString()+" is not a planets compatible object");
            }
            planetsModel = fedora.getPlanetsContentModel(pid);
        } catch (FedoraConnectionException e) {
            throw new DigitalObjectNotStoredException(e);
        } catch (DigitalObjectNotFoundException e) {
            //We already checked that it exists...
            throw new DigitalObjectNotStoredException(e);
        }


        PlanetsDatastream planetsDatastreamObject;
        try {
            planetsDatastreamObject = readPlanetsDatastream(planetsModel);
        } catch (ParseException e) {
            throw new DigitalObjectNotStoredException(e);
        } catch (FedoraConnectionException e) {
            throw new DigitalObjectNotStoredException(e);
        }
        //If so far, we have now read the datastream in as a java class



        //decode the streams for the planets object


        List<Datastream> metadatastreams = planetsDatastreamObject.getMetadatastreams();
        Map<String, Datastream> metamap = new HashMap<String, Datastream>();
        for (Datastream datastream: metadatastreams){
            metamap.put(datastream.getName(),datastream);
        }



        for (Metadata metadata : digitalObject.getMetadata()) {
            Datastream ds = metamap.get(metadata.getName());
            URI formatURI = metadata.getType();
            if (ds!=null){
                try {
                    fedora.modifyDatastream(pid,ds.getName(),metadata.getContent(),formatURI);
                } catch (FedoraConnectionException e) {
                    //TODO rollback
                    throw new DigitalObjectNotStoredException(e);
                } catch (StoreException e) {
                    throw new DigitalObjectNotStoredException(e);
                } catch (ParseException e) {
                    throw new DigitalObjectNotStoredException(e);
                }
            }
        }

        try {
            fedora.setObjectLabel(pid,digitalObject.getTitle());
        } catch (FedoraConnectionException e) {
            throw new DigitalObjectNotStoredException(e);
        }

        Datastream filedatastream = planetsDatastreamObject.getFiledatastream();
        URI formatURI = digitalObject.getFormat();
        try {
            fedora.modifyDatastream(pid,filedatastream.getName(),digitalObject.getContent().read(),formatURI);
        } catch (FedoraConnectionException e) {
            //TODO rollback
            throw new DigitalObjectNotStoredException(e);
        } catch (StoreException e) {
            throw new DigitalObjectNotStoredException(e);
        } catch (ParseException e) {
            throw new DigitalObjectNotStoredException(e);
        }
        try {
            return  fedora.pid2Uri(pid);
        } catch (ParseException e) {//Cannot happen
            throw new DigitalObjectNotStoredException(e);
        }


    }

    public boolean isWritable(URI pdURI) {
        String pid = fedora.uri2Pid(pdURI);
        try {
            return fedora.isWritable(pid);
        } catch (FedoraConnectionException e) {
            return false;
        }
    }

    public List<URI> list(URI pdURI) {
        //TODO implement

        return null;  //To change body of implemented methods use File | Settings | File Templates.
    }


    public DigitalObject retrieve(URI pdURI) throws DigitalObjectNotFoundException{

        String pid = fedora.uri2Pid(pdURI);
        //find the object

        try {
            boolean exists = fedora.exists(pid);
            if (!exists){
                throw new DigitalObjectNotFoundException("Object does not already exist");
            }
        } catch (FedoraConnectionException e) {
            throw new DigitalObjectNotFoundException(e);
        }

        String planetsmodel;
        try {
            if (!fedora.isDataObject(pid)) {
                throw new DigitalObjectNotFoundException("Object is not a data object");
            }
            //find the planets content model for the object
            if (!fedora.isPlanetsObject(pid)){
                throw new DigitalObjectNotFoundException("Object "+pdURI+" is not planets compatible");
            }

            planetsmodel = fedora.getPlanetsContentModel(pid);

        } catch (FedoraConnectionException e) {
            throw new DigitalObjectNotFoundException(e);
        }

        PlanetsDatastream planetsDatastreamObject;
        try {
            planetsDatastreamObject = readPlanetsDatastream(planetsmodel);
        } catch (ParseException e) {
            throw new DigitalObjectNotFoundException("Object "+pdURI+" is not planets compatible",e);
        } catch (FedoraConnectionException e) {
            throw new DigitalObjectNotFoundException("Object "+pdURI+" is not planets compatible",e);
        }
        //If so far, we have now read the datastream in as a java class



        //decode the streams for the planets object


        List<Datastream> metadatastreams = planetsDatastreamObject.getMetadatastreams();
        Map<String, Datastream> metamap = new HashMap<String, Datastream>();
        for (Datastream datastream: metadatastreams){
            metamap.put(datastream.getName(),datastream);
        }

        List<Metadata> metadata = new ArrayList<Metadata>();
        for (Datastream ds: metadatastreams){
            String contents = null;
            URI formatURI = null;
            try {
                contents = fedora.getDatastreamString(pid,ds.getName());
                try {
                    formatURI = fedora.getDatastreamFormat(pid,ds.getName());
                } catch (ParseException e) {
                    //So, format URI is null
                }
            } catch (FedoraConnectionException e) {
                throw new DigitalObjectNotFoundException(e);
            }
            metadata.add(new Metadata(formatURI,ds.getName(),contents));
        }




        Datastream filedatastream = planetsDatastreamObject.getFiledatastream();
        URL contenturl = null;
        URI objectformat = null;
        try {
            contenturl = fedora.getDatastreamURL(pid,filedatastream.getName());
            try {
                objectformat = fedora.getDatastreamFormat(pid,filedatastream.getName());
            } catch (ParseException e) {
                //So, format URI is nulll
            }
        } catch (FedoraConnectionException e) {
            throw new DigitalObjectNotFoundException(e);
        } catch (ParseException e) {
            throw new DigitalObjectNotFoundException(e);
        }
        String title;
        try {

            title = fedora.getObjectLabel(pid);
        } catch (FedoraConnectionException e) {
            throw new DigitalObjectNotFoundException(e);
        }

        //grab the relevant streams, and create a planets object
        DigitalObject.Builder builder
                = new DigitalObject.Builder(
                Content.byReference(contenturl));


        builder.metadata(metadata.toArray(new Metadata[metadata.size()]));
        builder.format(objectformat);
        builder.permanentUri(pdURI);
        builder.title(title);

        return builder.build();

    }

    private PlanetsDatastream readPlanetsDatastream(String planetsmodel) throws ParseException, FedoraConnectionException, DigitalObjectNotFoundException {
        try {
            Document planetsstream = fedora.getDatastreamXML(planetsmodel,PLANETS_DATASTREAM);
            JAXBContext jaxb = JAXBContext.newInstance("eu.planets_project.fedora.connector.planets");
            Unmarshaller unmarshaller = jaxb.createUnmarshaller();
            //Read the planets content stream
            JAXBElement unmarshalled = (JAXBElement) unmarshaller.unmarshal(planetsstream);
            PlanetsDatastream planetsDatastreamObject = (PlanetsDatastream) unmarshalled.getValue();
            return planetsDatastreamObject;

        } catch (JAXBException e) {
            throw new ParseException(e);
        }
    }

    public List<Class<? extends Query>> getQueryTypes() {

        //TODO implement
        ArrayList<Class<? extends Query>> list = new ArrayList<Class<? extends Query>>();
        list.add(TripleStoreQuery.class);
        list.add(QueryString.class);
        return list;


    }

    public List<URI> list(URI pdURI, Query q) throws QueryValidationException {

        //TODO implement
        if (q instanceof TripleStoreQuery){
            return null;
        }
        else if (q instanceof QueryString){
            return null;

        }
        else {
            throw new QueryValidationException("Unknown type of query");
        }
    }

}
