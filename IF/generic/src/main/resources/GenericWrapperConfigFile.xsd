<?xml version="1.0" encoding="UTF-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <xs:element name="serviceWrapping" type="serviceWrappingType"/>

    <xs:complexType name="tempfileType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="label" use="optional"/>
                <xs:attribute type="xs:string" name="name" use="optional"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="testType">
        <xs:sequence>
            <xs:element type="xs:string" name="command"/>
            <xs:element type="commandparametersType" name="commandparameters"/>
            <xs:element type="xs:string" name="expectedOutput"/>
            <xs:element type="xs:byte" name="expectedExitCode"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name"/>
    </xs:complexType>

    <xs:complexType name="toolpresetsType">
        <xs:sequence>
            <xs:element type="presetType" name="preset" maxOccurs="unbounded" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>An unbounded list of presets. A wrapped tool can optionally provide
                        a number of presets to make it easier for the users to use it. A
                        preset will appear to be just another parameter to the caller
                        although making use of a preset actually will initialise/override a
                        number of parameters. That is, if a caller explicitly specifies the
                        parameters "param1=a4" and "mode=Legal", then the "mode" preset
                        will override "param1", causing the "Legal" format to be used
                        rather than "a4". On the other hand, if the caller does not specify
                        any parameters or preset when calling the service, then the generic
                        wrapper will attempt to find a default preset and a default preset
                        setting. It is thus mandatory that the "default" attribute has been
                        declared in the "toolpresets" element if the wrapping applies
                        presets. However, if that is not the case, then the "toolpresets"
                        section must be empty and no "default" attribute may be declared!

                        An unbounded list of presets. A wrapped tool can optionally provide
                        a number of presets to make it easier for the users to use it. A
                        preset will appear to be just another parameter to the caller
                        although making use of a preset actually will initialise/override a
                        number of parameters. That is, in this example, if a caller
                        explicitly specifies the parameters "param1=-n" and "mode=AC-DC",
                        then the "mode" preset will override "param1", causing an empty
                        string to be used rather than "-n". On the other hand, if the
                        caller does not specify any parameters or preset when calling the
                        service, then the generic wrapper will attempt to find a default
                        preset and a default preset setting. It is thus mandatory that the
                        "default" attribute has been declared in the "toolpresets" element
                        if the wrapping applies presets. However, if that is not the case,
                        then the "toolpresets" section must be empty and no "default"
                        attribute may be declared! Also note that the caller of a service
                        may only specify only one preset to be used. Thus, it is not
                        possible to specify both "mode=AC-DC" and "quality=good" in this
                        example.

                        This "quality" preset category is essentially the same as the
                        "mode" category, and is only included to demonstrate that it is
                        possible for the caller to have more preset categories to choose
                        from.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute type="xs:string" name="default" use="optional"/>
    </xs:complexType>

    <xs:complexType name="toolparametersType">
        <xs:sequence>
            <xs:element type="parameterType" name="parameter" maxOccurs="unbounded" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>All the parameter labels used in the command line to specify
                        parameters, which must be provided by the caller of the service,
                        must be declared here in this unbounded list. If no "caller"
                        parameter labels are used in the "commandline" section, then this
                        section must still be present although empty.

                        All the parameter labels used in the command line to specify
                        parameters, which must be provided by the caller of the service,
                        must be declared here in this unbounded list. If no "caller"
                        parameter labels are used in the "commandline" section, then this
                        section must still be present although empty.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="propertiesType">
        <xs:sequence>
            <xs:element type="propertyType" name="property">
                <xs:annotation>
                    <xs:documentation>A property element has two attributes "name" and "id". The name
                        attribute specifies a human readable name and the id attribute must
                        be a valid (unique) URI. You may optionally specify a type attribute
                        as well.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="inputformatsType">
        <xs:sequence>
            <xs:element type="uriType" name="uri" maxOccurs="unbounded" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>List of format URIs identifying the valid input formats for the
                        wrapped command(s) in this "path" section. It is recommended to use
                        PRONOM URIs where possible in order to achieve the most accurate
                        description of the formats. File suffixes are inaccurate as most
                        file formats are available in several revisions. However, if a
                        format is unknown to PRONOM (or whatever registry that is being
                        used) and thus it is necessary to "invent" a format URI, then it
                        should be on the form: "info:planets/fmt/ext/&lt;PUT FORMAT DESCRIPTOR
                        HERE>"

                        List of format URIs identifying the valid input formats for the
                        wrapped command(s) in this "path" section. It is recommended to use
                        PRONOM URIs where possible in order to achieve the most accurate
                        description of the formats. File suffixes are inaccurate as most
                        file formats are available in several revisions. However, if a
                        format is unknown to PRONOM (or whatever registry that is being
                        used) and thus it is necessary to "invent" a format URI, then it
                        should be on the form: "info:planets/fmt/ext/&lt;PUT FORMAT DESCRIPTOR
                        HERE>" - like in the example below.

                        List of format URIs identifying the valid input formats for the
                        wrapped command(s) in this "path" section. It is recommended to use
                        PRONOM URIs where possible in order to achieve the most accurate
                        description of the formats. File suffixes are inaccurate as most
                        file formats are available in several revisions. However, if a
                        format is unknown to PRONOM (or whatever registry that is being
                        used) and thus it is necessary to "invent" a format URI, then it
                        should be on the form: "info:planets/fmt/ext/&lt;PUT FORMAT DESCRIPTOR
                        HERE>" - like in the example below.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="commandparametersType">
        <xs:sequence>
            <xs:element name="parameter" maxOccurs="unbounded" minOccurs="0" type="xs:string">
                <xs:annotation>
                    <xs:documentation>An unbounded list of parameters to the above command.
                        On unix/linux systems the sh command needs the option -c to
                        realise that is should execute a command rather than starting a
                        new shell and on Windows systems the cmd.exe needs the /c option
                        for the same. In order to make this configurable, a label should
                        be put in place of the option so the generic wrapper can
                        substitute it with the appropriate value. However, this label
                        must remain undefined within this path configuration, just like
                        the shell command label, to force the generic wrapper obtain the
                        appropriate value from the dynamic system configuration. This
                        makes it possible to make a wrapped tool work on different
                        platforms by changing the system/runtime configuration.

                        This is the actual shell command line to be wrapped, however,
                        notice that there is no actual tool command in this example. It
                        has been replaced by a label, just like the shell command, as the
                        same rule applies: The actual migration tool command must not be
                        specified directly in this configuration file as the generic
                        wrapper will get the tool command from the system/runtime
                        configuration. Thus, "#absolutetoolpath" will be substituted with
                        something like "/usr/bin/ps2pdf12" at runtime, provided that it
                        is this string is associated with the label in the runtime
                        configuration. All tags like "#param1" are also substituted by
                        command parameters and temporary file names by the generic
                        wrapper. However, these tag names (in this example "param1",
                        "tempSource" and "tempDestination") must be defined elsewhere in
                        this path description. In this example "param1" is defined in the
                        "toolparameters" section, indicating that it is a parameter value
                        that must be provided by the caller of the service, and the
                        remaining tags, "tempSource" and "tempDestination", are defined
                        in the "toolinput" and "tooloutput" sections. Any intermediate
                        temporary files must be defined in the "tempfiles" section (look
                        elsewhere in this example file for an example on this).
                        An un bounded list of parameters to the above command.
                        On unix/linux systems the sh command needs the option -c to
                        realise that is should execute a command rather than starting a
                        new shell and on Windows systems the cmd.exe needs the /c option
                        for the same. In order to make this configurable, a label should
                        be put in place of the option so the generic wrapper can
                        substitute it with the appropriate value. However, this label
                        must remain undefined within this path configuration, just like
                        the shell command label, to force the generic wrapper obtain the
                        appropriate value from the dynamic system configuration. This
                        makes it possible to make a wrapped tool work on different
                        platforms by changing the system/runtime configuration.

                        This is the actual shell command line to be wrapped, however,
                        notice that there is no actual tool commands in this example.
                        They have been replaced labels, just like the shell command, as
                        the same rule applies: The actual migration tool command(s) must
                        not be specified directly in this configuration file as the
                        generic wrapper will get the tool command(s) from the
                        system/runtime configuration. Thus, "#catcommand" will be
                        substituted with something like "/bin/cat" at runtime, provided
                        that it is this string is associated with the label in the
                        runtime configuration. All tags like "#param1" are also
                        substituted by command parameters and temporary file names by the
                        generic wrapper. However, these tag names (in this example
                        "param1", "tempSource", "myInterimFile" and "tempDestination")
                        must be defined elsewhere in this path description. In this
                        example "param1" is defined in the "toolparameters" section,
                        indicating that it is a parameter value that must be provided by
                        the caller of the service, and the remaining tags, "tempSource",
                        "myInterimFile" and "tempDestination", are defined in the
                        "toolinput", "tempfiles" and "tooloutput" sections.
                        An un bounded list of parameters to the above command.
                        On unix/linux systems the sh command needs the option -c to
                        realise that is should execute a command rather than starting a
                        new shell and on Windows systems the cmd.exe needs the /c option
                        for the same. In order to make this configurable, a label should
                        be put in place of the option so the generic wrapper can
                        substitute it with the appropriate value. However, this label
                        must remain undefined within this path configuration, just like
                        the shell command label, to force the generic wrapper obtain the
                        appropriate value from the dynamic system configuration. This
                        makes it possible to make a wrapped tool work on different
                        platforms by changing the system/runtime configuration.

                        This is the actual shell command line to be wrapped, however,
                        notice that there is no actual tool commands in this example.
                        They have been replaced labels, just like the shell command, as
                        the same rule applies: The actual migration tool command(s) must
                        not be specified directly in this configuration file as the
                        generic wrapper will get the tool command(s) from the
                        system/runtime configuration. Thus, "#catcommand" will be
                        substituted with something like "/bin/cat" at runtime, provided
                        that it is this string is associated with the label in the
                        runtime configuration. All tags like "#param1" are also
                        substituted by command parameters and temporary file names by the
                        generic wrapper. However, these tag names (in this example
                        "param1", "tempSource" and "tempDestination") must be defined
                        elsewhere in this path description. In this example "param1" is
                        defined in the "toolparameters" section, indicating that it is a
                        parameter value that must be provided by the caller of the
                        service, and the remaining tags, "tempSource" and
                        "tempDestination", are defined in the "toolinput" and
                        "tooloutput" sections. The usage of the CDATA tag in this example
                        is optional, however, there may be situations where a command
                        line contains characters which are not allowed by the XML
                        standard and in such situations it will be necessary to use it.
                        Also, notice that the command line contains two tools which are
                        chained by piping the output from the first tool to the second
                        tool. Furthermore, the first tool, the cat command, has been
                        configured to take its input from the standard input - note the
                        dash (-).</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="commandlineType">
        <xs:sequence>
            <xs:element type="xs:string" name="command">
                <xs:annotation>
                    <xs:documentation><![CDATA[This element contains all the fragments that constitute the command
					line to be executed by the generic wrapper. The general form of a
					command line is "<shell command> <shell option1> <shell option 2>
					... <shell option N>". Thus, a wrapped tool is actually executed in
					a separate shell. It is important that only one parameter is
					specified by each command parameter section. That is, if you want
					to execute something like: "/bin/sh -c -e -f migrationTool
					toolParam1 toolParam2" then "-c", "-e" and "-f" must be specified
					by each their command parameter section, while the entire string
					"migrationTool toolParam1 toolParam2" may be specified in the same
					section. Anything in the command and command parameter text can be
					replaced by a label of the form "#label" to be substituted by some
					value at runtime by the generic wrapper. The value which the label
					is replaced with may be specified by the caller of the service as a
					parameter, however, in that case the label must be declared in the
					"toolparameters" section. The generic wrapper will attempt to fetch
					values for undeclared labels from the system/runtime configuration,
					which is useful e.g. for deferring configuration of the absolute
					path to the migration tool until the installation time of the
					system.
				
						The command to be executed by the generic wrapper. Typically this
						will be "sh" on unix/linux systems and "command.exe" on Windows
						systems. However, do not rely on the command to exist in the
						system search path and do not specify an absolute path in this
						configuration file as this may (will!) break on various systems.
						Instead specifying the actual command, specify a label of the form
						"#label", just like in this example. However, this requires that
						label name is mapped to the absolute path of the program in the
						dynamic/system configuration of the service. I.e. "shellcommand"
						should be mapped to something like "/bin/sh". As opposed to labels
						to be substituted with parameter values, this label must remain
						undefined in this path configuration, thus, forcing the generic
						wrapper to obtain the appropriate value from the system/runtime
						configuration.
					
					This element contains all the fragments that constitute the command
					line to be executed by the generic wrapper. The general form of a
					command line is "<shell command> <shell option1> <shell option 2>
					... <shell option N>". Thus, a wrapped tool is actually executed in
					a separate shell. It is important that only one parameter is
					specified by each command parameter section. That is, if you want
					to execute something like: "/bin/sh -c -e -f migrationTool
					toolParam1 toolParam2" then "-c", "-e" and "-f" must be specified
					by each their command parameter section, while the entire string
					"migrationTool toolParam1 toolParam2" may be specified in the same
					section. Anything in the command and command parameter text can be
					replaced by a label of the form "#label" to be substituted by some
					value at runtime by the generic wrapper. The value which the label
					is replaced with may be specified by the caller of the service as a
					parameter, however, in that case the label must be declared in the
					"toolparameters" section. The generic wrapper will attempt to fetch
					values for undeclared labels from the system/runtime configuration,
					which is useful e.g. for deferring configuration of the absolute
					path to the migration tool until the installation time of the
					system.
				
						The command to be executed by the generic wrapper. Typically this
						will be "sh" on unix/linux systems and "command.exe" on Windows
						systems. However, do not rely on the command to exist in the
						system search path and do not specify an absolute path in this
						configuration file as this may (will!) break on various systems.
						Instead specifying the actual command, specify a label of the form
						"#label", just like in this example. However, this requires that
						label name is mapped to the absolute path of the program in the
						dynamic/system configuration of the service. I.e. "shellcommand"
						should be mapped to something like "/bin/sh". As opposed to labels
						to be substituted with parameter values, this label must remain
						undefined in this path configuration, thus, forcing the generic
						wrapper to obtain the appropriate value from the system/runtime
						configuration.
					
					This element contains all the fragments that constitute the command
					line to be executed by the generic wrapper. The general form of a
					command line is "<shell command> <shell option1> <shell option 2>
					... <shell option N>". Thus, a wrapped tool is actually executed in
					a separate shell. It is important that only one parameter is
					specified by each parameter section. That is, if you want to
					execute something like: "/bin/sh -c -e -f migrationTool toolParam1
					toolParam2" then "-c", "-e" and "-f" must be specified by each
					their parameter section, while the entire string "migrationTool
					toolParam1 toolParam2" may be specified in the same parameter
					section. Anything in the command and parameter text can be replaced
					by a label of the form "#label" to be substituted by some value at
					runtime by the generic wrapper. The value which the label is
					replaced with may be specified by the caller of the service as a
					parameter, however, in that case the label must be declared in the
					"toolparameters" section. The generic wrapper will attempt to fetch
					values for undeclared labels from the system/runtime configuration,
					which is useful e.g. for deferring configuration of the absolute
					path to the migration tool until the installation time of the
					system.
				
						The command to be executed by the generic wrapper. Typically this
						will be "sh" on unix/linux systems and "command.exe" on Windows
						systems. However, do not rely on the command to exist in the
						system search path and do not specify an absolute path in this
						configuration file as this may (will!) break on various systems.
						Instead specifying the actual command, specify a label of the form
						"#label", just like in this example. However, this requires that
						label name is mapped to the absolute path of the program in the
						dynamic/system configuration of the service. I.e. "shellcommand"
						should be mapped to something like "/bin/sh". As opposed to labels
						to be substituted with parameter values, this label must remain
						undefined in this path configuration, thus, forcing the generic
						wrapper to obtain the appropriate value from the system/runtime
						configuration.]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="commandparametersType" name="commandparameters"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="tooloutputType">
        <xs:sequence>
            <xs:element type="tempfileType" name="tempfile">
                <xs:annotation>
                    <xs:documentation>This section describes how the output object is passed on from the
                        command line tool to the generic wrapper. There are two options;
                        Either piping the data through standard output or to write the data
                        to a temporary file which the generic wrapper then reads it from.
                        If the wrapped tool is capable of writing the output object to
                        standard output, then the tag &lt;piped/> can be specified instead of
                        the "tempfile" element used in this example. However, make sure
                        that the command line is correctly configured to instruct the tool
                        to write to standard output and make sure that the tool actually
                        supports it. Also, note that only one of the two tags (piped and
                        tempfile) must be present in this section - never both of them.

                        Write the output to a temporary file automatically named by the
                        wrapper. If the tool requires a specific name for the output file
                        then it can be specified by adding a name attribute like this:
                        name="requiredName.foo". Please note that the label (in this case
                        "tempDestination") must match the label used in the command line
                        where the output file is specified.

                        This section describes how the output object is passed on from the
                        command line tool to the generic wrapper. There are two options;
                        Either piping the data through standard output or to write the data
                        to a temporary file which the generic wrapper then reads it from.
                        If the wrapped tool is capable of writing the output object to
                        standard output, then the tag &lt;piped/> can be specified instead of
                        the "tempfile" element used in this example. However, make sure
                        that the command line is correctly configured to instruct the tool
                        to write to standard output and make sure that the tool actually
                        supports it. Also, note that only one of the two tags (piped and
                        tempfile) must be present in this section - never both of them.

                        Write the output to a temporary file automatically named by the
                        wrapper. If the tool requires a specific name for the output file
                        then it can be specified by adding a name attribute like this:
                        name="requiredName.foo". Please note that the label (in this case
                        "tempDestination") must match the label used in the command line
                        where the output file is specified.

                        This section describes how the output object is passed on from the
                        command line tool to the generic wrapper. There are two options;
                        Either piping the data through standard output or to write the data
                        to a temporary file which the generic wrapper then reads it from.
                        If the wrapped tool is capable of writing the output object to
                        standard output, then the tag &lt;piped/> can be specified instead of
                        the "tempfile" element used in this example. However, make sure
                        that the command line is correctly configured to instruct the tool
                        to write to standard output and make sure that the tool actually
                        supports it. Also, note that only one of the two tags (piped and
                        tempfile) must be present in this section - never both of them.

                        Write the output to a temporary file automatically named by the
                        wrapper. If the tool requires a specific name for the output file
                        then it can be specified by adding a name attribute like this:
                        name="requiredName.foo". Please note that the label (in this case
                        "tempDestination") must match the label used in the command line
                        where the output file is specified.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="uriType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="value" use="optional"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="pathType">
        <xs:sequence>
            <xs:element type="inputformatsType" name="inputformats">
                <xs:annotation>
                    <xs:documentation>This path is an illustration of the possibility to actually define
                        multiple migration paths with only one path element, which is
                        convenient in case the tool is capable of migrating from a number of
                        formats to one specific format. However, the generic wrapper is
                        unable to automatically validating that the all these migrations can
                        be performed with the same command line (except from different
                        parameters specified by the caller). Thus, it is the responsibility
                        of the person writing the configuration file, to verify that it is
                        possible.

                        Example of migration from various revisions of the PS format to the
                        pdf1.2 format (Acrobat 3-and-later)

                        Silly migration path for conversion of lower case text to upper case
                        text, using 'cat' and 'tr'. This demonstrates the usage of multiple
                        migration tools and temporary intermediate files. The migration
                        paths described by a combination of one of the input formats and the
                        output format will overwrite any similar definitions from any
                        earlier path definitions, that is, definitions closer to the top of
                        the configuration file.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="outputformatType" name="outputformat"/>
            <xs:element type="commandlineType" name="commandline"/>
            <xs:element type="toolinputType" name="toolinput"/>
            <xs:element type="tooloutputType" name="tooloutput"/>
            <xs:element name="tempfiles">
                <xs:annotation>
                    <xs:documentation>More complex tool wrappings may utilise intermediate temporary
                        files. Please find examples on this elsewhere in this example file.
                        The use of temporary intermediate files is optional, however, this
                        section must be present although empty, if no intermediate
                        temporary files are applied.

                        More complex tool wrappings may utilise intermediate temporary
                        files. Please find examples on this elsewhere in this example file.
                        This section is empty in this example as it does not apply
                        temporary files for intermediate results. It is piped through
                        standard output instead, as seen from the command line declaration.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element type="tempfileType" name="tempfile" minOccurs="0">
                            <xs:annotation>
                                <xs:documentation>Tempfile entries are used for intermediate temporary files which
                                    may be necessary to create if the wrapped command line contains
                                    chained commands. Multiple "tempfile" entries are allowed, however,
                                    each should have a unique name and must match the corresponding
                                    labels used in the command line. In this example, there must be a
                                    "#myInterimFile" label in the command line parameters where the
                                    tool (temporary) input/output file must be specified.The use of
                                    temporary files is optional and depends entirely on the contents of
                                    the command line.

                                    Instruct the generic wrapper to create a file path to where the
                                    intermediate file named "myDiseredTempFileName.foo" can be written
                                    by the tool. The "name" attribute is optional, however, it is
                                    useful for situations where tools expects the file to have a
                                    special name and/or suffix. The generic wrapper will just generate
                                    a filename automatically if the "name" attribute is omitted.</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element type="toolparametersType" name="toolparameters"/>
            <xs:element type="toolpresetsType" name="toolpresets" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Tool presets can be used instead of messing with the command line
                        parameters. However, these presets can also be used as default
                        settings which will make it possible only to specify a some of the
                        parameters for the tool, as unspecified parameters just can be taken
                        from the defaults.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="serviceWrappingType">
        <xs:sequence>
            <xs:element type="serviceDescriptionType" name="serviceDescription">
                <xs:annotation>
                    <xs:documentation>General instructions: Please leave any optional fields empty if they
                        are not pertinent to a wrapping. That is, do not remove the tags from
                        the file - just leave them with no contents. Optional fields will be
                        explicitly marked as optional.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="selfTestsType" name="selfTests" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>THE SELF-TEST SECTION IS CURRENTLY NOT USED and should thus be omitted
                        in the current wrappings.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="pathsType" name="paths"/>
        </xs:sequence>
        <xs:attribute type="xs:float" name="version"/>
    </xs:complexType>

    <xs:complexType name="tempfilesType">
        <xs:sequence>
            <xs:element type="tempfileType" name="tempfile" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Tempfile entries are used for intermediate temporary files which
                        may be necessary to create if the wrapped command line contains
                        chained commands. Multiple "tempfile" entries are allowed, however,
                        each should have a unique name and must match the corresponding
                        labels used in the command line. In this example, there must be a
                        "#myInterimFile" label in the command line parameters where the
                        tool (temporary) input/output file must be specified.The use of
                        temporary files is optional and depends entirely on the contents of
                        the command line.

                        Instruct the generic wrapper to create a file path to where the
                        intermediate file named "myDiseredTempFileName.foo" can be written
                        by the tool. The "name" attribute is optional, however, it is
                        useful for situations where tools expects the file to have a
                        special name and/or suffix. The generic wrapper will just generate
                        a filename automatically if the "name" attribute is omitted.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="presetType">
        <xs:sequence>
            <xs:element name="description" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>If the caller of the service neither specifies any tool parameters
                        nor any preset, then the generic wrapper will automatically
                        initialise "param1" with the value from the "Normal" settings
                        element, as the "mode" preset and the "Normal" preset settings
                        have been specified as the defaults in this example. However, if
                        the caller has specified any tool parameters (and no preset) then
                        the generic wrapper will not attempt using the default preset.
                        Note that the "default" attribute must be declared for each preset
                        element.

                        This description is information to the callers about the over-all
                        effect of applying values from this preset.

                        If the caller of the service neither specifies any tool parameters
                        nor any preset, then the generic wrapper will automatically
                        initialise "param1" and "param2" with the values from the
                        "complete" settings element, as the "mode" preset and the
                        "complete" preset settings have been specified as the defaults in
                        this example. However, if the caller has specified any tool
                        parameters (and no preset) then the generic wrapper will not
                        attempt using the default preset. Note that the "default"
                        attribute must be declared for each preset element.

                        This description is information to the callers about the over-all
                        effect of applying values from this preset.

                        This description is information to the callers about the over-all
                        effect of applying values from this preset.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="settingsType" name="settings" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name" use="optional"/>
        <xs:attribute type="xs:string" name="default" use="optional"/>
    </xs:complexType>

    <xs:complexType name="propertyType">
        <xs:sequence>
            <xs:element type="valueType" name="value">
                <xs:annotation>
                    <xs:documentation>A property element must contain a "value" sub-element, however, its
                        "unit" attribute is optional.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:string" name="description"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name"/>
        <xs:attribute type="xs:string" name="id"/>
        <xs:attribute type="xs:string" name="type"/>
    </xs:complexType>

    <xs:complexType name="settingsType">
        <xs:sequence>
            <xs:element type="parameterType" name="parameter" maxOccurs="unbounded" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>If the "mode" preset (i.e. parameter) is set to "US" then param1
                        will be initialised with the below value, thus overriding any
                        param1 value already specified by the caller. The description
                        should give a meaningful description about the effect of choosing
                        this preset setting.

                        If the "mode" preset (i.e. parameter) is set to "Normal" then
                        param1 will be set to the below value, thus overriding any param1
                        value already specified by the caller. The description should
                        give a meaningful description about the effect of choosing this
                        preset setting.

                        If the "mode" preset (i.e. parameter) is set to "commplete" then
                        param1 and param2 will be initialised with the below values, thus
                        overriding any param1 and param2 value already specified by the
                        caller. The description should give a meaningful description
                        about the effect of choosing this preset setting.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="description" minOccurs="0" type="xs:string">
            </xs:element>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name" use="optional"/>
    </xs:complexType>

    <xs:complexType name="selfTestsType">
        <xs:sequence>
            <xs:element type="testType" name="test"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="serviceDescriptionType">
        <xs:sequence>
            <xs:element type="xs:string" name="title">
                <xs:annotation>
                    <xs:documentation>A brief name by which this service is known.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:string" name="description">
                <xs:annotation>
                    <xs:documentation>A human readable description of the service. This is your chance to
                        describe your service to potential users. Although automatic service
                        discovery will more likely depend upon service type, input formats
                        and tool wrapped, users browsing the Planets service registry will
                        see the name and description. The description may be written in HTML,
                        using a &lt;![CDATA[ &lt;b>Hi&lt;/b> ]]&gt; (Optional field)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="toolType" name="tool">
                <xs:annotation>
                    <xs:documentation>Detailed description of the wrapped command line tool.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:float" name="version" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Service wrapping version information. (Optional field)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:string" name="creator">
                <xs:annotation>
                    <xs:documentation>Who wrote the wrapper. Preferred form would be a URI or a full email
                        address(es), like: "Full Name &lt;fullname@server.com>".</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:string" name="identifier" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>A unique identifier for this service. "We need a unique id for every
                        service; Andrew Lindley is using a MD5 hash to identify a service.
                        This is a brilliant idea. I would say this field summarizes Name of
                        class impl service, Version of service and ID of Tool (URI) or makes
                        them unnecessary.". This is an optional field, however, the generic
                        wrapper will automatically generate an identifier if no value is
                        specified. This is done by generating a MD5 hash of a string
                        containing the canonical class name of the wrapping service
                        implementation class, the service version and the toolID. (Optional
                        field)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:string" name="instructions" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Installation and setup instructions for the service. This includes
                        software to be installed, environment variables to be set, properties
                        to be set, etc. It is the responsibility of the developer to ensure
                        that the instructions provided are of appropriate detail and quality.
                        This really depends upon the tool been wrapped, for example the pure
                        Java services currently in pserv don't provide any instructions but
                        they should build and deploy when the pserv project is built and they
                        should simply work without any set up. More complex tools relying on
                        installed software will require more detailed information. As yet,
                        there are no formal requirements on the instructions, but they should
                        be sufficient for the build manager and the testbed manager to deploy
                        the service. The instructions should closely follow the installation
                        instructions from the Service Submission document. (Optional field)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:anyURI" name="furtherinfo" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>A URI that provides a link to further information about a service
                        wrapper. This could point to a web page, information about the tool
                        wrapped, or a help page hosted on the web. (Optional field)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:anyURI" name="logo" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>A URI that can be used to provide a graphic image logo for the
                        service. This will be displayed in the service registry if present.

                        (Optional field)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="propertiesType" name="properties" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>An optional list of hard-coded properties to add to the service
                        description. If no properties are applicable to a wrapping then the
                        properties tag should just be left empty. That is, there must be no
                        "property" tags inside it. FIXME! Come up with some brilliant
                        examples here..... Would OS/Hardware platform qualify? (Optional
                        field)</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="parameterType" mixed="true">
        <xs:sequence>
            <xs:element name="description" minOccurs="0" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Instruct the generic wrapper to accept a parameter called "param1"
                        and provide a description which it can pass on to users, to
                        instruct them in how to use it. That is, information about valid
                        parameter values and their effect.

                        Instruct the generic wrapper to accept a parameter called "param1"
                        and provide a description which it can pass on to users, to
                        instruct them in how to use it. That is, information about valid
                        parameter values and their effect.
                        Using CDATA preserves the formatting of the text description.
                        Instruct the generic wrapper to accept a parameter called "param2"
                        and provide a description which it can pass on to users, to
                        instruct them in how to use it. That is, information about valid
                        parameter values and their effect.
                        Using CDATA preserves the formatting of the text description.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name" use="optional"/>
    </xs:complexType>

    <xs:complexType name="valueType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="unit"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="toolinputType">
        <xs:sequence>
            <xs:element type="tempfileType" name="tempfile" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>This section describes how the input file is passed on to the
                        command line migration tool. There are two options; Either piping
                        the data through standard input to the tool or to write the data to
                        a temporary file which the tool then reads it from. If the wrapped
                        tool is capable of reading the input object from standard input,
                        then the tag &lt;piped/> can be specified instead of the "tempfile"
                        element used in this example. However, make sure that the command
                        line is correctly configured to instruct the tool to read from
                        standard input and make sure that the tool actually supports it.
                        Also, note that only one of the two tags (piped and tempfile) must
                        be present in this section - never both of them.

                        Get the object to migrate from a temporary file automatically
                        named by the generic wrapper. If the tool requires a specific name
                        for the input file then it can be specified by adding a name
                        attribute like this: name="requiredName.foo". Please note that the
                        label (in this case "tempSource") must match the label used in the
                        command line where the input file is specified.

                        This section describes how the input file is passed on to the
                        command line migration tool. There are two options; Either piping
                        the data through standard input to the tool or to write the data to
                        a temporary file which the tool then reads it from. If the wrapped
                        tool is capable of reading the input object from standard input,
                        then the tag &lt;piped/> can be specified instead of the "tempfile"
                        element used in this example. However, make sure that the command
                        line is correctly configured to instruct the tool to read from
                        standard input and make sure that the tool actually supports it.
                        Also, note that only one of the two tags (piped and tempfile) must
                        be present in this section - never both of them.

                        Get the object to migrate from a temporary file named
                        "desiredInputFileName". This feature is useful for tools which
                        expects that the input file has a certain name (typically a
                        special file suffix). Please note that the label (in this case
                        "tempSource") must match the label used in the command line where
                        the input file is specified.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:string" name="piped" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>This section describes how the input file is passed on to the
                        command line migration tool. There are two options; Either piping
                        the data through standard input to the tool or to write the data to
                        a temporary file which the tool then reads it from. If the wrapped
                        tool is capable of reading the input object from standard input,
                        then the tag &lt;piped/> can be specified instead of the "tempfile"
                        element used in this example. However, make sure that the command
                        line is correctly configured to instruct the tool to read from
                        standard input and make sure that the tool actually supports it.
                        Also, note that only one of the two tags (piped and tempfile) must
                        be present in this section - never both of them. In this example
                        the generic wrapper is instructed to pass the digital object on to
                        the migration tool through standard input.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="outputformatType">
        <xs:sequence>
            <xs:element type="uriType" name="uri">
                <xs:annotation>
                    <xs:documentation>Format URI identifying the output format of the wrapped command(s)
                        in this "path" section. It is recommended to use a PRONOM URI when
                        possible in order to achieve the most accurate description of the
                        format. File suffixes are inaccurate as most file formats are
                        available in several revisions. However, if a format is unknown to
                        PRONOM (or whatever registry that is being used) and thus it is
                        necessary to "invent" a format URI, then it should be on the form:
                        "info:planets/fmt/ext/&lt;PUT FORMAT DESCRIPTOR HERE>"

                        Format URI identifying the output format of the wrapped command(s)
                        in this "path" section. It is recommended to use a PRONOM URI when
                        possible in order to achieve the most accurate description of the
                        format. File suffixes are inaccurate as most file formats are
                        available in several revisions. However, if a format is unknown to
                        PRONOM (or whatever registry that is being used) and thus it is
                        necessary to "invent" a format URI, then it should be on the form:
                        "info:planets/fmt/ext/&lt;PUT FORMAT DESCRIPTOR HERE>" - like in the
                        example below.

                        Format URI identifying the output format of the wrapped command(s)
                        in this "path" section. It is recommended to use a PRONOM URI when
                        possible in order to achieve the most accurate description of the
                        format. File suffixes are inaccurate as most file formats are
                        available in several revisions. However, if a format is unknown to
                        PRONOM (or whatever registry that is being used) and thus it is
                        necessary to "invent" a format URI, then it should be on the form:
                        "info:planets/fmt/ext/&lt;PUT FORMAT DESCRIPTOR HERE>" - like in the
                        example below.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="pathsType">
        <xs:sequence>
            <xs:element type="pathType" name="path" maxOccurs="unbounded" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>No presets</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="toolType">
        <xs:sequence>
            <xs:element type="xs:string" name="name" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>The name of the wrapped tool (Optional field)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:anyURI" name="identifier" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>An identifier for this tool, should be resolvable via a tool
                        registry. (Optional field)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:string" name="description" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Tool description (Optional field)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:anyURI" name="homepage" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Link to the (project) home page of the command line tool. (Optional
                        field)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:string" name="version" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Tool version information. E.g. the version string printed by the
                        tool. (Optional field)</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
</xs:schema>